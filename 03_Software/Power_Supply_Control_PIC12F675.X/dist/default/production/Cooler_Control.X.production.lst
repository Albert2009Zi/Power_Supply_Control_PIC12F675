

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Sep 12 15:18:35 2025

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x5E,2
    25     0000                     
    26                           ; Generated 17/08/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC12F675 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0000                     	;# 
    61     0001                     	;# 
    62     0002                     	;# 
    63     0003                     	;# 
    64     0004                     	;# 
    65     0005                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000E                     	;# 
    70     000E                     	;# 
    71     000F                     	;# 
    72     0010                     	;# 
    73     0019                     	;# 
    74     001E                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     008C                     	;# 
    79     008E                     	;# 
    80     0090                     	;# 
    81     0095                     	;# 
    82     0096                     	;# 
    83     0096                     	;# 
    84     0099                     	;# 
    85     009A                     	;# 
    86     009A                     	;# 
    87     009B                     	;# 
    88     009C                     	;# 
    89     009D                     	;# 
    90     009E                     	;# 
    91     009F                     	;# 
    92     0000                     	;# 
    93     0001                     	;# 
    94     0002                     	;# 
    95     0003                     	;# 
    96     0004                     	;# 
    97     0005                     	;# 
    98     000A                     	;# 
    99     000B                     	;# 
   100     000C                     	;# 
   101     000E                     	;# 
   102     000E                     	;# 
   103     000F                     	;# 
   104     0010                     	;# 
   105     0019                     	;# 
   106     001E                     	;# 
   107     001F                     	;# 
   108     0081                     	;# 
   109     0085                     	;# 
   110     008C                     	;# 
   111     008E                     	;# 
   112     0090                     	;# 
   113     0095                     	;# 
   114     0096                     	;# 
   115     0096                     	;# 
   116     0099                     	;# 
   117     009A                     	;# 
   118     009A                     	;# 
   119     009B                     	;# 
   120     009C                     	;# 
   121     009D                     	;# 
   122     009E                     	;# 
   123     009F                     	;# 
   124     0000                     	;# 
   125     0001                     	;# 
   126     0002                     	;# 
   127     0003                     	;# 
   128     0004                     	;# 
   129     0005                     	;# 
   130     000A                     	;# 
   131     000B                     	;# 
   132     000C                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0019                     	;# 
   138     001E                     	;# 
   139     001F                     	;# 
   140     0081                     	;# 
   141     0085                     	;# 
   142     008C                     	;# 
   143     008E                     	;# 
   144     0090                     	;# 
   145     0095                     	;# 
   146     0096                     	;# 
   147     0096                     	;# 
   148     0099                     	;# 
   149     009A                     	;# 
   150     009A                     	;# 
   151     009B                     	;# 
   152     009C                     	;# 
   153     009D                     	;# 
   154     009E                     	;# 
   155     009F                     	;# 
   156     0000                     	;# 
   157     0001                     	;# 
   158     0002                     	;# 
   159     0003                     	;# 
   160     0004                     	;# 
   161     0005                     	;# 
   162     000A                     	;# 
   163     000B                     	;# 
   164     000C                     	;# 
   165     000E                     	;# 
   166     000E                     	;# 
   167     000F                     	;# 
   168     0010                     	;# 
   169     0019                     	;# 
   170     001E                     	;# 
   171     001F                     	;# 
   172     0081                     	;# 
   173     0085                     	;# 
   174     008C                     	;# 
   175     008E                     	;# 
   176     0090                     	;# 
   177     0095                     	;# 
   178     0096                     	;# 
   179     0096                     	;# 
   180     0099                     	;# 
   181     009A                     	;# 
   182     009A                     	;# 
   183     009B                     	;# 
   184     009C                     	;# 
   185     009D                     	;# 
   186     009E                     	;# 
   187     009F                     	;# 
   188     0000                     	;# 
   189     0001                     	;# 
   190     0002                     	;# 
   191     0003                     	;# 
   192     0004                     	;# 
   193     0005                     	;# 
   194     000A                     	;# 
   195     000B                     	;# 
   196     000C                     	;# 
   197     000E                     	;# 
   198     000E                     	;# 
   199     000F                     	;# 
   200     0010                     	;# 
   201     0019                     	;# 
   202     001E                     	;# 
   203     001F                     	;# 
   204     0081                     	;# 
   205     0085                     	;# 
   206     008C                     	;# 
   207     008E                     	;# 
   208     0090                     	;# 
   209     0095                     	;# 
   210     0096                     	;# 
   211     0096                     	;# 
   212     0099                     	;# 
   213     009A                     	;# 
   214     009A                     	;# 
   215     009B                     	;# 
   216     009C                     	;# 
   217     009D                     	;# 
   218     009E                     	;# 
   219     009F                     	;# 
   220     001E                     _ADRESH	set	30
   221     001F                     _ADCON0	set	31
   222     0005                     _GPIO	set	5
   223     0019                     _CMCON	set	25
   224     0001                     _TMR0	set	1
   225     00F9                     _GO	set	249
   226     0066                     _ADIF	set	102
   227     00FA                     _CHS0	set	250
   228     00FB                     _CHS1	set	251
   229     00FF                     _ADFM	set	255
   230     00F8                     _ADON	set	248
   231     005F                     _GIE	set	95
   232     005E                     _PEIE	set	94
   233     00FE                     _VCFG	set	254
   234     002C                     _GP4	set	44
   235     002D                     _GP5	set	45
   236     005D                     _TMR0IE	set	93
   237     005A                     _TMR0IF	set	90
   238     002A                     _GP2	set	42
   239     009E                     _ADRESL	set	158
   240     009F                     _ANSEL	set	159
   241     0085                     _TRISIO	set	133
   242     0099                     _VRCON	set	153
   243     0081                     _OPTION_REG	set	129
   244     0429                     _TRISIO1	set	1065
   245     0428                     _TRISIO0	set	1064
   246     042C                     _TRISIO4	set	1068
   247     042D                     _TRISIO5	set	1069
   248     042A                     _TRISIO2	set	1066
   249                           
   250                           	psect	cinit
   251     000C                     start_initialization:	
   252                           ; #config settings
   253                           
   254     000C                     __initialization:
   255                           
   256                           ; Clear objects allocated to BANK0
   257     000C  1383               	bcf	3,7	;select IRP bank0
   258     000D  3020               	movlw	low __pbssBANK0
   259     000E  0084               	movwf	4
   260     000F  303A               	movlw	low (__pbssBANK0+26)
   261     0010  22F9               	fcall	clear_ram0
   262     0011                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     0011                     __end_of__initialization:
   266     0011  0183               	clrf	3
   267     0012  2B09               	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	bssBANK0
   270     0020                     __pbssBANK0:
   271     0020                     _beepsQueue:
   272     0020                     	ds	15
   273     002F                     BeepsStateMachine@stateMachineDuration:
   274     002F                     	ds	2
   275     0031                     _cnt0:
   276     0031                     	ds	2
   277     0033                     ADCProcessing@adcState:
   278     0033                     	ds	1
   279     0034                     playAlert@soundState:
   280     0034                     	ds	1
   281     0035                     BeepsStateMachine@stateMachineAllowTimeout:
   282     0035                     	ds	1
   283     0036                     BeepsStateMachine@state:
   284     0036                     	ds	1
   285     0037                     _queueTail:
   286     0037                     	ds	1
   287     0038                     _queueHead:
   288     0038                     	ds	1
   289     0039                     _prmFlags:
   290     0039                     	ds	1
   291                           
   292                           	psect	clrtext
   293     02F9                     clear_ram0:	
   294                           ;	Called with FSR containing the base address, and
   295                           ;	W with the last address+1
   296                           
   297     02F9  0064               	clrwdt	;clear the watchdog before getting into this loop
   298     02FA                     clrloop0:
   299     02FA  0180               	clrf	0	;clear RAM location pointed to by FSR
   300     02FB  0A84               	incf	4,f	;increment pointer
   301     02FC  0604               	xorwf	4,w	;XOR with final address
   302     02FD  1903               	btfsc	3,2	;have we reached the end yet?
   303     02FE  3400               	retlw	0	;all done for this memory range, return
   304     02FF  0604               	xorwf	4,w	;XOR again to restore value
   305     0300  2AFA               	goto	clrloop0	;do the next byte
   306                           
   307                           	psect	cstackCOMMON
   308     0000                     __pcstackCOMMON:
   309     0000                     ??_InitTimer0:
   310     0000                     ??_Init_uC:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0000                     ??_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0000                     ??_EnqueueBeeps:	
   317                           ; 1 bytes @ 0x0
   318                           
   319     0000                     ??___bmul:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0000                     ??___awmod:	
   323                           ; 1 bytes @ 0x0
   324                           
   325                           
   326                           	psect	cstackBANK0
   327     003A                     __pcstackBANK0:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     003A                     ?_InitTimer0:
   331     003A                     ?_Init_uC:	
   332                           ; 1 bytes @ 0x0
   333                           
   334     003A                     ?_ADCProcessing:	
   335                           ; 1 bytes @ 0x0
   336                           
   337     003A                     ?_playAlert:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     003A                     ?_BeepsStateMachine:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     003A                     ?_MuxVoltage:	
   344                           ; 1 bytes @ 0x0
   345                           
   346     003A                     ?_MuxTemp:	
   347                           ; 1 bytes @ 0x0
   348                           
   349     003A                     ?_ISR:	
   350                           ; 1 bytes @ 0x0
   351                           
   352     003A                     ??_ISR:	
   353                           ; 1 bytes @ 0x0
   354                           
   355     003A                     ?_main:	
   356                           ; 1 bytes @ 0x0
   357                           
   358                           
   359                           ; 2 bytes @ 0x0
   360     003A                     	ds	2
   361     003C                     ??_MuxVoltage:
   362     003C                     ??_MuxTemp:	
   363                           ; 1 bytes @ 0x2
   364                           
   365     003C                     ?___bmul:	
   366                           ; 1 bytes @ 0x2
   367                           
   368     003C                     ?___awmod:	
   369                           ; 1 bytes @ 0x2
   370                           
   371     003C                     ___bmul@multiplicand:	
   372                           ; 2 bytes @ 0x2
   373                           
   374     003C                     ___awmod@divisor:	
   375                           ; 1 bytes @ 0x2
   376                           
   377                           
   378                           ; 2 bytes @ 0x2
   379     003C                     	ds	1
   380     003D                     ??_ADCProcessing:
   381     003D                     ___bmul@product:	
   382                           ; 1 bytes @ 0x3
   383                           
   384                           
   385                           ; 1 bytes @ 0x3
   386     003D                     	ds	1
   387     003E                     ___bmul@multiplier:
   388     003E                     ___awmod@dividend:	
   389                           ; 1 bytes @ 0x4
   390                           
   391                           
   392                           ; 2 bytes @ 0x4
   393     003E                     	ds	1
   394     003F                     ADCProcessing@adcValue:
   395                           
   396                           ; 2 bytes @ 0x5
   397     003F                     	ds	1
   398     0040                     ___awmod@counter:
   399                           
   400                           ; 1 bytes @ 0x6
   401     0040                     	ds	1
   402     0041                     ___awmod@sign:
   403                           
   404                           ; 1 bytes @ 0x7
   405     0041                     	ds	1
   406     0042                     ??_BeepsStateMachine:
   407     0042                     ?_EnqueueBeeps:	
   408                           ; 1 bytes @ 0x8
   409                           
   410     0042                     EnqueueBeeps@duration:	
   411                           ; 1 bytes @ 0x8
   412                           
   413                           
   414                           ; 2 bytes @ 0x8
   415     0042                     	ds	2
   416     0044                     EnqueueBeeps@allowTimeout:
   417                           
   418                           ; 1 bytes @ 0xA
   419     0044                     	ds	1
   420     0045                     ??_playAlert:
   421                           
   422                           ; 1 bytes @ 0xB
   423     0045                     	ds	4
   424     0049                     playAlert@totalBeeps:
   425                           
   426                           ; 1 bytes @ 0xF
   427     0049                     	ds	1
   428     004A                     playAlert@i:
   429                           
   430                           ; 1 bytes @ 0x10
   431     004A                     	ds	1
   432     004B                     playAlert@i_85:
   433                           
   434                           ; 1 bytes @ 0x11
   435     004B                     	ds	1
   436     004C                     playAlert@howMuchTimesPlayLong:
   437                           
   438                           ; 1 bytes @ 0x12
   439     004C                     	ds	1
   440     004D                     playAlert@howMuchTimesPlayShort:
   441                           
   442                           ; 1 bytes @ 0x13
   443     004D                     	ds	1
   444                           
   445                           	psect	maintext
   446     0309                     __pmaintext:	
   447 ;;
   448 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   449 ;;
   450 ;; *************** function _main *****************
   451 ;; Defined at:
   452 ;;		line 66 in file "main.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;		None
   455 ;; Auto vars:     Size  Location     Type
   456 ;;		None
   457 ;; Return value:  Size  Location     Type
   458 ;;                  2   14[None  ] int 
   459 ;; Registers used:
   460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : B00/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMMON   BANK0
   466 ;;      Params:         0       0
   467 ;;      Locals:         0       0
   468 ;;      Temps:          0       0
   469 ;;      Totals:         0       0
   470 ;;Total ram usage:        0 bytes
   471 ;; Hardware stack levels required when called: 4
   472 ;; This function calls:
   473 ;;		_ADCProcessing
   474 ;;		_BeepsStateMachine
   475 ;;		_InitTimer0
   476 ;;		_Init_uC
   477 ;;		_playAlert
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483     0309                     _main:	
   484                           ;psect for function _main
   485                           
   486     0309                     l1530:	
   487                           ;incstack = 0
   488                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   489                           
   490     0309  2301               	fcall	_InitTimer0
   491     030A  2290               	fcall	_Init_uC
   492     030B                     l1532:
   493     030B  20C5               	fcall	_ADCProcessing
   494     030C                     l1534:
   495     030C  2013               	fcall	_playAlert
   496     030D                     l1536:
   497     030D  2174               	fcall	_BeepsStateMachine
   498     030E  2B0B               	goto	l1532
   499     030F  280B               	ljmp	start
   500     0310                     __end_of_main:
   501                           
   502                           	psect	text1
   503     0013                     __ptext1:	
   504 ;; *************** function _playAlert *****************
   505 ;; Defined at:
   506 ;;		line 94 in file "sounds.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  i               1   17[BANK0 ] unsigned char 
   511 ;;  i               1   16[BANK0 ] unsigned char 
   512 ;;  howMuchTimes    1   19[BANK0 ] unsigned char 
   513 ;;  howMuchTimes    1   18[BANK0 ] unsigned char 
   514 ;;  totalBeeps      1   15[BANK0 ] unsigned char 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0
   524 ;;      Params:         0       0
   525 ;;      Locals:         0       5
   526 ;;      Temps:          0       4
   527 ;;      Totals:         0       9
   528 ;;Total ram usage:        9 bytes
   529 ;; Hardware stack levels used: 1
   530 ;; Hardware stack levels required when called: 3
   531 ;; This function calls:
   532 ;;		_EnqueueBeeps
   533 ;; This function is called by:
   534 ;;		_main
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538     0013                     _playAlert:	
   539                           ;psect for function _playAlert
   540                           
   541     0013                     l1412:	
   542                           ;incstack = 0
   543                           ; Regs used in _playAlert: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   544                           
   545                           
   546                           ;sounds.c: 96:    uint8_t howMuchTimesPlayShort = 0;
   547     0013  1283               	bcf	3,5	;RP0=0, select bank0
   548     0014  01CD               	clrf	playAlert@howMuchTimesPlayShort
   549                           
   550                           ;sounds.c: 97:    uint8_t howMuchTimesPlayLong = 0;
   551     0015  01CC               	clrf	playAlert@howMuchTimesPlayLong
   552                           
   553                           ;sounds.c: 99:    static uint8_t soundState = 0;;sounds.c: 101:    switch (soundState){
   554     0016  2851               	goto	l1448
   555     0017                     l63:	
   556                           ;sounds.c: 102:      case 0:
   557                           
   558                           
   559                           ;sounds.c: 103:       if (prmFlags.errorUnderVoltage){
   560     0017  1CB9               	btfss	_prmFlags,1	;volatile
   561     0018  281A               	goto	u631
   562     0019  281B               	goto	u630
   563     001A                     u631:
   564     001A  281F               	goto	l1418
   565     001B                     u630:
   566     001B                     l1414:
   567                           
   568                           ;sounds.c: 104:         howMuchTimesPlayShort = 2;
   569     001B  3002               	movlw	2
   570     001C  00CD               	movwf	playAlert@howMuchTimesPlayShort
   571     001D                     l1416:
   572                           
   573                           ;sounds.c: 105:         howMuchTimesPlayLong = 1;
   574     001D  01CC               	clrf	playAlert@howMuchTimesPlayLong
   575     001E  0ACC               	incf	playAlert@howMuchTimesPlayLong,f
   576     001F                     l1418:
   577                           
   578                           ;sounds.c: 107:       if (!prmFlags.alarmState) soundState = 1;
   579     001F  1A39               	btfsc	_prmFlags,4	;volatile
   580     0020  2822               	goto	u641
   581     0021  2823               	goto	u640
   582     0022                     u641:
   583     0022  2867               	goto	l1450
   584     0023                     u640:
   585     0023                     l1420:
   586     0023  01B4               	clrf	playAlert@soundState
   587     0024  0AB4               	incf	playAlert@soundState,f
   588     0025  2867               	goto	l1450
   589     0026                     l67:	
   590                           ;sounds.c: 110:      case 1:
   591                           
   592                           
   593                           ;sounds.c: 111:      if (prmFlags.errorOverVoltage) {
   594     0026  1D39               	btfss	_prmFlags,2	;volatile
   595     0027  2829               	goto	u651
   596     0028  282A               	goto	u650
   597     0029                     u651:
   598     0029  282E               	goto	l1424
   599     002A                     u650:
   600     002A                     l1422:
   601                           
   602                           ;sounds.c: 112:          howMuchTimesPlayShort = 2;
   603     002A  3002               	movlw	2
   604     002B  00CD               	movwf	playAlert@howMuchTimesPlayShort
   605                           
   606                           ;sounds.c: 113:          howMuchTimesPlayLong = 2;
   607     002C  3002               	movlw	2
   608     002D  00CC               	movwf	playAlert@howMuchTimesPlayLong
   609     002E                     l1424:
   610                           
   611                           ;sounds.c: 115:       if (!prmFlags.alarmState) soundState = 2;
   612     002E  1A39               	btfsc	_prmFlags,4	;volatile
   613     002F  2831               	goto	u661
   614     0030  2832               	goto	u660
   615     0031                     u661:
   616     0031  2867               	goto	l1450
   617     0032                     u660:
   618     0032                     l1426:
   619     0032  3002               	movlw	2
   620     0033  00B4               	movwf	playAlert@soundState
   621     0034  2867               	goto	l1450
   622     0035                     l70:	
   623                           ;sounds.c: 118:      case 2:
   624                           
   625                           
   626                           ;sounds.c: 119:      if (prmFlags.errorHighTemperature){
   627     0035  1DB9               	btfss	_prmFlags,3	;volatile
   628     0036  2838               	goto	u671
   629     0037  2839               	goto	u670
   630     0038                     u671:
   631     0038  283C               	goto	l1432
   632     0039                     u670:
   633     0039                     l1428:
   634                           
   635                           ;sounds.c: 120:        howMuchTimesPlayShort = 3;
   636     0039  3003               	movlw	3
   637     003A  00CD               	movwf	playAlert@howMuchTimesPlayShort
   638     003B                     l1430:
   639                           
   640                           ;sounds.c: 121:        howMuchTimesPlayLong = 0;
   641     003B  01CC               	clrf	playAlert@howMuchTimesPlayLong
   642     003C                     l1432:
   643                           
   644                           ;sounds.c: 123:       if (!prmFlags.alarmState) soundState = 3;
   645     003C  1A39               	btfsc	_prmFlags,4	;volatile
   646     003D  283F               	goto	u681
   647     003E  2840               	goto	u680
   648     003F                     u681:
   649     003F  2867               	goto	l1450
   650     0040                     u680:
   651     0040                     l1434:
   652     0040  3003               	movlw	3
   653     0041  00B4               	movwf	playAlert@soundState
   654     0042  2867               	goto	l1450
   655     0043                     l73:	
   656                           ;sounds.c: 126:      case 3:
   657                           
   658                           
   659                           ;sounds.c: 127:       if (prmFlags.playLong){
   660     0043  1EB9               	btfss	_prmFlags,5	;volatile
   661     0044  2846               	goto	u691
   662     0045  2847               	goto	u690
   663     0046                     u691:
   664     0046  284A               	goto	l1440
   665     0047                     u690:
   666     0047                     l1436:
   667                           
   668                           ;sounds.c: 128:        howMuchTimesPlayShort = 0;
   669     0047  01CD               	clrf	playAlert@howMuchTimesPlayShort
   670     0048                     l1438:
   671                           
   672                           ;sounds.c: 129:        howMuchTimesPlayLong = 1;
   673     0048  01CC               	clrf	playAlert@howMuchTimesPlayLong
   674     0049  0ACC               	incf	playAlert@howMuchTimesPlayLong,f
   675     004A                     l1440:
   676                           
   677                           ;sounds.c: 131:       if (!prmFlags.alarmState) {
   678     004A  1A39               	btfsc	_prmFlags,4	;volatile
   679     004B  284D               	goto	u701
   680     004C  284E               	goto	u700
   681     004D                     u701:
   682     004D  2867               	goto	l1450
   683     004E                     u700:
   684     004E                     l1442:
   685                           
   686                           ;sounds.c: 132:        soundState = 0;
   687     004E  01B4               	clrf	playAlert@soundState
   688     004F                     l1444:
   689                           
   690                           ;sounds.c: 133:        prmFlags.playLong = 0;
   691     004F  12B9               	bcf	_prmFlags,5	;volatile
   692     0050  2867               	goto	l1450
   693     0051                     l1448:
   694     0051  0834               	movf	playAlert@soundState,w
   695     0052  00C5               	movwf	??_playAlert
   696     0053  01C6               	clrf	??_playAlert+1
   697                           
   698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   699                           ; Switch size 1, requested type "simple"
   700                           ; Number of cases is 1, Range of values is 0 to 0
   701                           ; switch strategies available:
   702                           ; Name         Instructions Cycles
   703                           ; simple_byte            4     3 (average)
   704                           ; direct_byte            7     6 (fixed)
   705                           ; jumptable            260     6 (fixed)
   706                           ;	Chosen strategy is simple_byte
   707     0054  0846               	movf	??_playAlert+1,w
   708     0055  3A00               	xorlw	0	; case 0
   709     0056  1903               	skipnz
   710     0057  2859               	goto	l1606
   711     0058  2867               	goto	l1450
   712     0059                     l1606:
   713                           
   714                           ; Switch size 1, requested type "simple"
   715                           ; Number of cases is 4, Range of values is 0 to 3
   716                           ; switch strategies available:
   717                           ; Name         Instructions Cycles
   718                           ; direct_byte           10     6 (fixed)
   719                           ; simple_byte           13     7 (average)
   720                           ; jumptable            260     6 (fixed)
   721                           ;	Chosen strategy is simple_byte
   722     0059  0845               	movf	??_playAlert,w
   723     005A  3A00               	xorlw	0	; case 0
   724     005B  1903               	skipnz
   725     005C  2817               	goto	l63
   726     005D  3A01               	xorlw	1	; case 1
   727     005E  1903               	skipnz
   728     005F  2826               	goto	l67
   729     0060  3A03               	xorlw	3	; case 2
   730     0061  1903               	skipnz
   731     0062  2835               	goto	l70
   732     0063  3A01               	xorlw	1	; case 3
   733     0064  1903               	skipnz
   734     0065  2843               	goto	l73
   735     0066  2867               	goto	l1450
   736     0067                     l1450:
   737                           
   738                           ;sounds.c: 141:     totalBeeps = howMuchTimesPlayShort + howMuchTimesPlayLong;
   739     0067  084C               	movf	playAlert@howMuchTimesPlayLong,w
   740     0068  074D               	addwf	playAlert@howMuchTimesPlayShort,w
   741     0069  00C9               	movwf	playAlert@totalBeeps
   742     006A                     l1452:
   743                           
   744                           ;sounds.c: 144:     for (uint8_t i = 0; i < howMuchTimesPlayShort; i++) {
   745     006A  01CA               	clrf	playAlert@i
   746     006B  288D               	goto	l1462
   747     006C                     l1454:
   748                           
   749                           ;sounds.c: 145:         if (i == (totalBeeps - 1)) {
   750     006C  0849               	movf	playAlert@totalBeeps,w
   751     006D  3EFF               	addlw	255
   752     006E  00C5               	movwf	??_playAlert
   753     006F  30FF               	movlw	255
   754     0070  1803               	skipnc
   755     0071  3000               	movlw	0
   756     0072  00C6               	movwf	??_playAlert+1
   757     0073  084A               	movf	playAlert@i,w
   758     0074  0645               	xorwf	??_playAlert,w
   759     0075  0446               	iorwf	??_playAlert+1,w
   760     0076  1D03               	skipz
   761     0077  2879               	goto	u711
   762     0078  287A               	goto	u710
   763     0079                     u711:
   764     0079  2882               	goto	l1458
   765     007A                     u710:
   766     007A                     l1456:
   767                           
   768                           ;sounds.c: 146:             EnqueueBeeps(120, 1);
   769     007A  3078               	movlw	120
   770     007B  00C2               	movwf	EnqueueBeeps@duration
   771     007C  3000               	movlw	0
   772     007D  00C3               	movwf	EnqueueBeeps@duration+1
   773     007E  01C4               	clrf	EnqueueBeeps@allowTimeout
   774     007F  0AC4               	incf	EnqueueBeeps@allowTimeout,f
   775     0080  2254               	fcall	_EnqueueBeeps
   776                           
   777                           ;sounds.c: 147:         } else {
   778     0081  2888               	goto	l1460
   779     0082                     l1458:
   780                           
   781                           ;sounds.c: 148:             EnqueueBeeps(120, 0);
   782     0082  3078               	movlw	120
   783     0083  00C2               	movwf	EnqueueBeeps@duration
   784     0084  3000               	movlw	0
   785     0085  00C3               	movwf	EnqueueBeeps@duration+1
   786     0086  01C4               	clrf	EnqueueBeeps@allowTimeout
   787     0087  2254               	fcall	_EnqueueBeeps
   788     0088                     l1460:
   789                           
   790                           ;sounds.c: 150:     }
   791     0088  3001               	movlw	1
   792     0089  00DF               	movwf	btemp+1
   793     008A  085F               	movf	btemp+1,w
   794     008B  1283               	bcf	3,5	;RP0=0, select bank0
   795     008C  07CA               	addwf	playAlert@i,f
   796     008D                     l1462:
   797     008D  084D               	movf	playAlert@howMuchTimesPlayShort,w
   798     008E  024A               	subwf	playAlert@i,w
   799     008F  1C03               	skipc
   800     0090  2892               	goto	u721
   801     0091  2893               	goto	u720
   802     0092                     u721:
   803     0092  286C               	goto	l1454
   804     0093                     u720:
   805     0093                     l1464:
   806                           
   807                           ;sounds.c: 153:     for (uint8_t i = 0; i < howMuchTimesPlayLong; i++) {
   808     0093  01CB               	clrf	playAlert@i_85
   809     0094  28BE               	goto	l1474
   810     0095                     l1466:
   811                           
   812                           ;sounds.c: 154:         if ((howMuchTimesPlayShort + i) == totalBeeps - 1) {
   813     0095  0849               	movf	playAlert@totalBeeps,w
   814     0096  3EFF               	addlw	255
   815     0097  00C5               	movwf	??_playAlert
   816     0098  30FF               	movlw	255
   817     0099  1803               	skipnc
   818     009A  3000               	movlw	0
   819     009B  00C6               	movwf	??_playAlert+1
   820     009C  084D               	movf	playAlert@howMuchTimesPlayShort,w
   821     009D  074B               	addwf	playAlert@i_85,w
   822     009E  00C7               	movwf	??_playAlert+2
   823     009F  01C8               	clrf	??_playAlert+3
   824     00A0  0DC8               	rlf	??_playAlert+3,f
   825     00A1  0846               	movf	??_playAlert+1,w
   826     00A2  0648               	xorwf	??_playAlert+3,w
   827     00A3  1D03               	skipz
   828     00A4  28A7               	goto	u735
   829     00A5  0845               	movf	??_playAlert,w
   830     00A6  0647               	xorwf	??_playAlert+2,w
   831     00A7                     u735:
   832     00A7  1D03               	skipz
   833     00A8  28AA               	goto	u731
   834     00A9  28AB               	goto	u730
   835     00AA                     u731:
   836     00AA  28B3               	goto	l1470
   837     00AB                     u730:
   838     00AB                     l1468:
   839                           
   840                           ;sounds.c: 155:             EnqueueBeeps(300, 1);
   841     00AB  302C               	movlw	44
   842     00AC  00C2               	movwf	EnqueueBeeps@duration
   843     00AD  3001               	movlw	1
   844     00AE  00C3               	movwf	EnqueueBeeps@duration+1
   845     00AF  01C4               	clrf	EnqueueBeeps@allowTimeout
   846     00B0  0AC4               	incf	EnqueueBeeps@allowTimeout,f
   847     00B1  2254               	fcall	_EnqueueBeeps
   848                           
   849                           ;sounds.c: 156:         } else {
   850     00B2  28B9               	goto	l1472
   851     00B3                     l1470:
   852                           
   853                           ;sounds.c: 157:             EnqueueBeeps(300, 0);
   854     00B3  302C               	movlw	44
   855     00B4  00C2               	movwf	EnqueueBeeps@duration
   856     00B5  3001               	movlw	1
   857     00B6  00C3               	movwf	EnqueueBeeps@duration+1
   858     00B7  01C4               	clrf	EnqueueBeeps@allowTimeout
   859     00B8  2254               	fcall	_EnqueueBeeps
   860     00B9                     l1472:
   861                           
   862                           ;sounds.c: 159:     }
   863     00B9  3001               	movlw	1
   864     00BA  00DF               	movwf	btemp+1
   865     00BB  085F               	movf	btemp+1,w
   866     00BC  1283               	bcf	3,5	;RP0=0, select bank0
   867     00BD  07CB               	addwf	playAlert@i_85,f
   868     00BE                     l1474:
   869     00BE  084C               	movf	playAlert@howMuchTimesPlayLong,w
   870     00BF  024B               	subwf	playAlert@i_85,w
   871     00C0  1C03               	skipc
   872     00C1  28C3               	goto	u741
   873     00C2  28C4               	goto	u740
   874     00C3                     u741:
   875     00C3  2895               	goto	l1466
   876     00C4                     u740:
   877     00C4                     l87:
   878     00C4  0008               	return
   879     00C5                     __end_of_playAlert:
   880                           
   881                           	psect	text2
   882     0254                     __ptext2:	
   883 ;; *************** function _EnqueueBeeps *****************
   884 ;; Defined at:
   885 ;;		line 25 in file "sounds.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  duration        2    8[BANK0 ] unsigned int 
   888 ;;  allowTimeout    1   10[BANK0 ] unsigned char 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0
   900 ;;      Params:         0       3
   901 ;;      Locals:         0       0
   902 ;;      Temps:          0       0
   903 ;;      Totals:         0       3
   904 ;;Total ram usage:        3 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 2
   907 ;; This function calls:
   908 ;;		___awmod
   909 ;;		___bmul
   910 ;; This function is called by:
   911 ;;		_playAlert
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915     0254                     _EnqueueBeeps:	
   916                           ;psect for function _EnqueueBeeps
   917                           
   918     0254                     l1264:	
   919                           ;incstack = 0
   920                           ; Regs used in _EnqueueBeeps: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   921                           
   922                           
   923                           ;sounds.c: 27:     if ((queueTail + 1) % 5 != queueHead) {
   924     0254  3005               	movlw	5
   925     0255  1283               	bcf	3,5	;RP0=0, select bank0
   926     0256  00BC               	movwf	___awmod@divisor
   927     0257  3000               	movlw	0
   928     0258  00BD               	movwf	___awmod@divisor+1
   929     0259  0837               	movf	_queueTail,w
   930     025A  3E01               	addlw	1
   931     025B  00BE               	movwf	___awmod@dividend
   932     025C  3000               	movlw	0
   933     025D  1803               	skipnc
   934     025E  3001               	movlw	1
   935     025F  00BF               	movwf	___awmod@dividend+1
   936     0260  21FA               	fcall	___awmod
   937     0261  1283               	bcf	3,5	;RP0=0, select bank0
   938     0262  0838               	movf	_queueHead,w
   939     0263  063C               	xorwf	?___awmod,w
   940     0264  043D               	iorwf	?___awmod+1,w
   941     0265  1903               	skipnz
   942     0266  2A68               	goto	u461
   943     0267  2A69               	goto	u460
   944     0268                     u461:
   945     0268  2A8F               	goto	l34
   946     0269                     u460:
   947     0269                     l1266:
   948                           
   949                           ;sounds.c: 29:         beepsQueue[queueTail].duration = duration;
   950     0269  3003               	movlw	3
   951     026A  00BC               	movwf	___bmul@multiplicand
   952     026B  0837               	movf	_queueTail,w
   953     026C  22B0               	fcall	___bmul
   954     026D  3E20               	addlw	(low (_beepsQueue| 0))& (0+255)
   955     026E  0084               	movwf	4
   956     026F  1283               	bcf	3,5	;RP0=0, select bank0
   957     0270  0842               	movf	EnqueueBeeps@duration,w
   958     0271  1383               	bcf	3,7	;select IRP bank0
   959     0272  0080               	movwf	0
   960     0273  0A84               	incf	4,f
   961     0274  0843               	movf	EnqueueBeeps@duration+1,w
   962     0275  0080               	movwf	0
   963                           
   964                           ;sounds.c: 30:         beepsQueue[queueTail].allowTimeout = allowTimeout;
   965     0276  3003               	movlw	3
   966     0277  00BC               	movwf	___bmul@multiplicand
   967     0278  0837               	movf	_queueTail,w
   968     0279  22B0               	fcall	___bmul
   969     027A  3E22               	addlw	(low ((_beepsQueue| 0+2)))& (0+255)
   970     027B  0084               	movwf	4
   971     027C  1283               	bcf	3,5	;RP0=0, select bank0
   972     027D  0844               	movf	EnqueueBeeps@allowTimeout,w
   973     027E  1383               	bcf	3,7	;select IRP bank0
   974     027F  0080               	movwf	0
   975     0280                     l1268:
   976                           
   977                           ;sounds.c: 31:         queueTail = (queueTail + 1) % 5;
   978     0280  3005               	movlw	5
   979     0281  00BC               	movwf	___awmod@divisor
   980     0282  3000               	movlw	0
   981     0283  00BD               	movwf	___awmod@divisor+1
   982     0284  0837               	movf	_queueTail,w
   983     0285  3E01               	addlw	1
   984     0286  00BE               	movwf	___awmod@dividend
   985     0287  3000               	movlw	0
   986     0288  1803               	skipnc
   987     0289  3001               	movlw	1
   988     028A  00BF               	movwf	___awmod@dividend+1
   989     028B  21FA               	fcall	___awmod
   990     028C  1283               	bcf	3,5	;RP0=0, select bank0
   991     028D  083C               	movf	?___awmod,w
   992     028E  00B7               	movwf	_queueTail
   993     028F                     l34:
   994     028F  0008               	return
   995     0290                     __end_of_EnqueueBeeps:
   996                           
   997                           	psect	text3
   998     0290                     __ptext3:	
   999 ;; *************** function _Init_uC *****************
  1000 ;; Defined at:
  1001 ;;		line 16 in file "initPeriphery.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0
  1015 ;;      Params:         0       0
  1016 ;;      Locals:         0       0
  1017 ;;      Temps:          0       0
  1018 ;;      Totals:         0       0
  1019 ;;Total ram usage:        0 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; Hardware stack levels required when called: 2
  1022 ;; This function calls:
  1023 ;;		_MuxVoltage
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029     0290                     _Init_uC:	
  1030                           ;psect for function _Init_uC
  1031                           
  1032     0290                     l1310:	
  1033                           ;incstack = 0
  1034                           ; Regs used in _Init_uC: [wreg+status,2+status,0+pclath+cstack]
  1035                           
  1036                           
  1037                           ;initPeriphery.c: 17:     CMCON = 0x07;
  1038     0290  3007               	movlw	7
  1039     0291  1283               	bcf	3,5	;RP0=0, select bank0
  1040     0292  0099               	movwf	25	;volatile
  1041     0293                     l1312:
  1042                           
  1043                           ;initPeriphery.c: 18:     VRCON = 0x00;
  1044     0293  1683               	bsf	3,5	;RP0=1, select bank1
  1045     0294  0199               	clrf	25	;volatile
  1046     0295                     l1314:
  1047                           
  1048                           ;initPeriphery.c: 21:     TRISIO = 0;
  1049     0295  0185               	clrf	5	;volatile
  1050     0296                     l1316:
  1051                           
  1052                           ;initPeriphery.c: 22:     GPIO = 0;
  1053     0296  1283               	bcf	3,5	;RP0=0, select bank0
  1054     0297  0185               	clrf	5	;volatile
  1055     0298                     l1318:
  1056                           
  1057                           ;initPeriphery.c: 25:     TRISIO2 = 0;
  1058     0298  1683               	bsf	3,5	;RP0=1, select bank1
  1059     0299  1105               	bcf	5,2	;volatile
  1060     029A                     l1320:
  1061                           
  1062                           ;initPeriphery.c: 26:     GP2 = 0;
  1063     029A  1283               	bcf	3,5	;RP0=0, select bank0
  1064     029B  1105               	bcf	5,2	;volatile
  1065     029C                     l1322:
  1066                           
  1067                           ;initPeriphery.c: 29:     TRISIO5 = 0;
  1068     029C  1683               	bsf	3,5	;RP0=1, select bank1
  1069     029D  1285               	bcf	5,5	;volatile
  1070     029E                     l1324:
  1071                           
  1072                           ;initPeriphery.c: 30:     GP5 = 1;
  1073     029E  1283               	bcf	3,5	;RP0=0, select bank0
  1074     029F  1685               	bsf	5,5	;volatile
  1075     02A0                     l1326:
  1076                           
  1077                           ;initPeriphery.c: 33:     TRISIO4 = 0;
  1078     02A0  1683               	bsf	3,5	;RP0=1, select bank1
  1079     02A1  1205               	bcf	5,4	;volatile
  1080     02A2                     l1328:
  1081                           
  1082                           ;initPeriphery.c: 34:     GP4 = 1;
  1083     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1084     02A3  1605               	bsf	5,4	;volatile
  1085     02A4                     l1330:
  1086                           
  1087                           ;initPeriphery.c: 37:     VCFG = 0;
  1088     02A4  131F               	bcf	31,6	;volatile
  1089     02A5                     l1332:
  1090                           
  1091                           ;initPeriphery.c: 38:     TRISIO0 = 1;
  1092     02A5  1683               	bsf	3,5	;RP0=1, select bank1
  1093     02A6  1405               	bsf	5,0	;volatile
  1094     02A7                     l1334:
  1095                           
  1096                           ;initPeriphery.c: 39:     TRISIO1 = 1;
  1097     02A7  1485               	bsf	5,1	;volatile
  1098     02A8                     l1336:
  1099                           
  1100                           ;initPeriphery.c: 41:     ANSEL = 0b00110011;
  1101     02A8  3033               	movlw	51
  1102     02A9  009F               	movwf	31	;volatile
  1103     02AA                     l1338:
  1104                           
  1105                           ;initPeriphery.c: 43:     PEIE = 1;
  1106     02AA  170B               	bsf	11,6	;volatile
  1107     02AB                     l1340:
  1108                           
  1109                           ;initPeriphery.c: 44:     GIE = 1;
  1110     02AB  178B               	bsf	11,7	;volatile
  1111     02AC                     l1342:
  1112                           
  1113                           ;initPeriphery.c: 47:     prmFlags.playLong = 1;
  1114     02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1115     02AD  16B9               	bsf	_prmFlags,5	;volatile
  1116     02AE                     l1344:
  1117                           
  1118                           ;initPeriphery.c: 49:     MuxVoltage();
  1119     02AE  22DB               	fcall	_MuxVoltage
  1120     02AF                     l137:
  1121     02AF  0008               	return
  1122     02B0                     __end_of_Init_uC:
  1123                           
  1124                           	psect	text4
  1125     0301                     __ptext4:	
  1126 ;; *************** function _InitTimer0 *****************
  1127 ;; Defined at:
  1128 ;;		line 9 in file "initPeriphery.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMMON   BANK0
  1142 ;;      Params:         0       0
  1143 ;;      Locals:         0       0
  1144 ;;      Temps:          0       0
  1145 ;;      Totals:         0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels used: 1
  1148 ;; Hardware stack levels required when called: 1
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156     0301                     _InitTimer0:	
  1157                           ;psect for function _InitTimer0
  1158                           
  1159     0301                     l1302:	
  1160                           ;incstack = 0
  1161                           ; Regs used in _InitTimer0: [wreg+status,2]
  1162                           
  1163                           
  1164                           ;initPeriphery.c: 10:     OPTION_REG = 0b11000001;
  1165     0301  30C1               	movlw	193
  1166     0302  1683               	bsf	3,5	;RP0=1, select bank1
  1167     0303  0081               	movwf	1	;volatile
  1168     0304                     l1304:
  1169                           
  1170                           ;initPeriphery.c: 11:     TMR0 = 0;
  1171     0304  1283               	bcf	3,5	;RP0=0, select bank0
  1172     0305  0181               	clrf	1	;volatile
  1173     0306                     l1306:
  1174                           
  1175                           ;initPeriphery.c: 12:     TMR0IF = 0;
  1176     0306  110B               	bcf	11,2	;volatile
  1177     0307                     l1308:
  1178                           
  1179                           ;initPeriphery.c: 13:     TMR0IE = 1;
  1180     0307  168B               	bsf	11,5	;volatile
  1181     0308                     l134:
  1182     0308  0008               	return
  1183     0309                     __end_of_InitTimer0:
  1184                           
  1185                           	psect	text5
  1186     0174                     __ptext5:	
  1187 ;; *************** function _BeepsStateMachine *****************
  1188 ;; Defined at:
  1189 ;;		line 38 in file "sounds.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0
  1203 ;;      Params:         0       0
  1204 ;;      Locals:         0       0
  1205 ;;      Temps:          0       2
  1206 ;;      Totals:         0       2
  1207 ;;Total ram usage:        2 bytes
  1208 ;; Hardware stack levels used: 1
  1209 ;; Hardware stack levels required when called: 2
  1210 ;; This function calls:
  1211 ;;		___awmod
  1212 ;;		___bmul
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218     0174                     _BeepsStateMachine:	
  1219                           ;psect for function _BeepsStateMachine
  1220                           
  1221     0174                     l1480:	
  1222                           ;incstack = 0
  1223                           ; Regs used in _BeepsStateMachine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1224                           
  1225                           
  1226                           ;sounds.c: 40:     static uint8_t state = 0;;sounds.c: 41:     static uint16_t stateMach
      +                          ineDuration = 0;;sounds.c: 42:     static uint8_t stateMachineAllowTimeout = 0;;sounds.c
      +                          : 44:     switch(state){
  1227     0174  29E2               	goto	l1524
  1228     0175                     l1482:
  1229                           
  1230                           ;sounds.c: 46:         if (queueHead != queueTail) {
  1231     0175  0838               	movf	_queueHead,w
  1232     0176  0637               	xorwf	_queueTail,w
  1233     0177  1903               	skipnz
  1234     0178  297A               	goto	u751
  1235     0179  297B               	goto	u750
  1236     017A                     u751:
  1237     017A  29F9               	goto	l57
  1238     017B                     u750:
  1239     017B                     l1484:
  1240                           
  1241                           ;sounds.c: 47:                 stateMachineDuration = beepsQueue[queueHead].duration;
  1242     017B  3003               	movlw	3
  1243     017C  00BC               	movwf	___bmul@multiplicand
  1244     017D  0838               	movf	_queueHead,w
  1245     017E  22B0               	fcall	___bmul
  1246     017F  3E20               	addlw	(low (_beepsQueue| 0))& (0+255)
  1247     0180  0084               	movwf	4
  1248     0181  1383               	bcf	3,7	;select IRP bank0
  1249     0182  0800               	movf	0,w
  1250     0183  1283               	bcf	3,5	;RP0=0, select bank0
  1251     0184  00AF               	movwf	BeepsStateMachine@stateMachineDuration
  1252     0185  0A84               	incf	4,f
  1253     0186  0800               	movf	0,w
  1254     0187  00B0               	movwf	BeepsStateMachine@stateMachineDuration+1
  1255                           
  1256                           ;sounds.c: 48:                 stateMachineAllowTimeout = beepsQueue[queueHead].allowTim
      +                          eout;
  1257     0188  3003               	movlw	3
  1258     0189  00BC               	movwf	___bmul@multiplicand
  1259     018A  0838               	movf	_queueHead,w
  1260     018B  22B0               	fcall	___bmul
  1261     018C  3E22               	addlw	(low ((_beepsQueue| 0+2)))& (0+255)
  1262     018D  0084               	movwf	4
  1263     018E  1383               	bcf	3,7	;select IRP bank0
  1264     018F  0800               	movf	0,w
  1265     0190  1283               	bcf	3,5	;RP0=0, select bank0
  1266     0191  00B5               	movwf	BeepsStateMachine@stateMachineAllowTimeout
  1267     0192                     l1486:
  1268                           
  1269                           ;sounds.c: 49:                 queueHead = (queueHead + 1) % 5;
  1270     0192  3005               	movlw	5
  1271     0193  00BC               	movwf	___awmod@divisor
  1272     0194  3000               	movlw	0
  1273     0195  00BD               	movwf	___awmod@divisor+1
  1274     0196  0838               	movf	_queueHead,w
  1275     0197  3E01               	addlw	1
  1276     0198  00BE               	movwf	___awmod@dividend
  1277     0199  3000               	movlw	0
  1278     019A  1803               	skipnc
  1279     019B  3001               	movlw	1
  1280     019C  00BF               	movwf	___awmod@dividend+1
  1281     019D  21FA               	fcall	___awmod
  1282     019E  1283               	bcf	3,5	;RP0=0, select bank0
  1283     019F  083C               	movf	?___awmod,w
  1284     01A0  00B8               	movwf	_queueHead
  1285     01A1                     l1488:
  1286                           
  1287                           ;sounds.c: 50:                 GP2 = 1;
  1288     01A1  1505               	bsf	5,2	;volatile
  1289     01A2                     l1490:
  1290                           
  1291                           ;sounds.c: 51:                 cnt0 = 0;
  1292     01A2  01B1               	clrf	_cnt0	;volatile
  1293     01A3  01B2               	clrf	_cnt0+1	;volatile
  1294     01A4                     l1492:
  1295                           
  1296                           ;sounds.c: 52:                 state = 1;
  1297     01A4  01B6               	clrf	BeepsStateMachine@state
  1298     01A5  0AB6               	incf	BeepsStateMachine@state,f
  1299     01A6                     l1494:
  1300                           
  1301                           ;sounds.c: 53:           prmFlags.alarmState = 1;
  1302     01A6  1639               	bsf	_prmFlags,4	;volatile
  1303     01A7  29F9               	goto	l57
  1304     01A8                     l1496:
  1305                           
  1306                           ;sounds.c: 58:    if (cnt0 >= stateMachineDuration){
  1307     01A8  0830               	movf	BeepsStateMachine@stateMachineDuration+1,w
  1308     01A9  0232               	subwf	_cnt0+1,w	;volatile
  1309     01AA  1D03               	skipz
  1310     01AB  29AE               	goto	u765
  1311     01AC  082F               	movf	BeepsStateMachine@stateMachineDuration,w
  1312     01AD  0231               	subwf	_cnt0,w	;volatile
  1313     01AE                     u765:
  1314     01AE  1C03               	skipc
  1315     01AF  29B1               	goto	u761
  1316     01B0  29B2               	goto	u760
  1317     01B1                     u761:
  1318     01B1  29F9               	goto	l57
  1319     01B2                     u760:
  1320     01B2                     l1498:
  1321                           
  1322                           ;sounds.c: 59:              cnt0 = 0;
  1323     01B2  01B1               	clrf	_cnt0	;volatile
  1324     01B3  01B2               	clrf	_cnt0+1	;volatile
  1325     01B4                     l1500:
  1326                           
  1327                           ;sounds.c: 60:              state = 2;
  1328     01B4  3002               	movlw	2
  1329     01B5  00B6               	movwf	BeepsStateMachine@state
  1330     01B6                     l1502:
  1331                           
  1332                           ;sounds.c: 61:              GP2 = 0;
  1333     01B6  1105               	bcf	5,2	;volatile
  1334     01B7  29F9               	goto	l57
  1335     01B8                     l1504:
  1336                           
  1337                           ;sounds.c: 66:           if (cnt0 >= 80){
  1338     01B8  3000               	movlw	0
  1339     01B9  0232               	subwf	_cnt0+1,w	;volatile
  1340     01BA  3050               	movlw	80
  1341     01BB  1903               	skipnz
  1342     01BC  0231               	subwf	_cnt0,w	;volatile
  1343     01BD  1C03               	skipc
  1344     01BE  29C0               	goto	u771
  1345     01BF  29C1               	goto	u770
  1346     01C0                     u771:
  1347     01C0  29F9               	goto	l57
  1348     01C1                     u770:
  1349     01C1                     l1506:
  1350                           
  1351                           ;sounds.c: 67:              cnt0 = 0;
  1352     01C1  01B1               	clrf	_cnt0	;volatile
  1353     01C2  01B2               	clrf	_cnt0+1	;volatile
  1354     01C3                     l1508:
  1355                           
  1356                           ;sounds.c: 68:              if (stateMachineAllowTimeout == 0){
  1357     01C3  0835               	movf	BeepsStateMachine@stateMachineAllowTimeout,w
  1358     01C4  1D03               	btfss	3,2
  1359     01C5  29C7               	goto	u781
  1360     01C6  29C8               	goto	u780
  1361     01C7                     u781:
  1362     01C7  29CA               	goto	l1512
  1363     01C8                     u780:
  1364     01C8                     l1510:
  1365                           
  1366                           ;sounds.c: 69:                  state = 0;
  1367     01C8  01B6               	clrf	BeepsStateMachine@state
  1368                           
  1369                           ;sounds.c: 70:          }
  1370     01C9  29F9               	goto	l57
  1371     01CA                     l1512:
  1372     01CA  0335               	decf	BeepsStateMachine@stateMachineAllowTimeout,w
  1373     01CB  1D03               	btfss	3,2
  1374     01CC  29CE               	goto	u791
  1375     01CD  29CF               	goto	u790
  1376     01CE                     u791:
  1377     01CE  29F9               	goto	l57
  1378     01CF                     u790:
  1379     01CF                     l1514:
  1380                           
  1381                           ;sounds.c: 72:          state = 3;
  1382     01CF  3003               	movlw	3
  1383     01D0  00B6               	movwf	BeepsStateMachine@state
  1384     01D1  29F9               	goto	l57
  1385     01D2                     l1516:
  1386                           
  1387                           ;sounds.c: 78:          if (cnt0 >= 1300){
  1388     01D2  3005               	movlw	5
  1389     01D3  0232               	subwf	_cnt0+1,w	;volatile
  1390     01D4  3014               	movlw	20
  1391     01D5  1903               	skipnz
  1392     01D6  0231               	subwf	_cnt0,w	;volatile
  1393     01D7  1C03               	skipc
  1394     01D8  29DA               	goto	u801
  1395     01D9  29DB               	goto	u800
  1396     01DA                     u801:
  1397     01DA  29F9               	goto	l57
  1398     01DB                     u800:
  1399     01DB                     l1518:
  1400                           
  1401                           ;sounds.c: 79:            cnt0 = 0;
  1402     01DB  01B1               	clrf	_cnt0	;volatile
  1403     01DC  01B2               	clrf	_cnt0+1	;volatile
  1404                           
  1405                           ;sounds.c: 80:            queueHead = 0;
  1406     01DD  01B8               	clrf	_queueHead
  1407                           
  1408                           ;sounds.c: 81:            queueTail = 0;
  1409     01DE  01B7               	clrf	_queueTail
  1410                           
  1411                           ;sounds.c: 82:         state = 0;
  1412     01DF  01B6               	clrf	BeepsStateMachine@state
  1413     01E0                     l1520:
  1414                           
  1415                           ;sounds.c: 83:         prmFlags.alarmState = 0;
  1416     01E0  1239               	bcf	_prmFlags,4	;volatile
  1417     01E1  29F9               	goto	l57
  1418     01E2                     l1524:
  1419     01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1420     01E3  0836               	movf	BeepsStateMachine@state,w
  1421     01E4  00C2               	movwf	??_BeepsStateMachine
  1422     01E5  01C3               	clrf	??_BeepsStateMachine+1
  1423                           
  1424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1425                           ; Switch size 1, requested type "simple"
  1426                           ; Number of cases is 1, Range of values is 0 to 0
  1427                           ; switch strategies available:
  1428                           ; Name         Instructions Cycles
  1429                           ; simple_byte            4     3 (average)
  1430                           ; direct_byte            7     6 (fixed)
  1431                           ; jumptable            260     6 (fixed)
  1432                           ;	Chosen strategy is simple_byte
  1433     01E6  0843               	movf	??_BeepsStateMachine+1,w
  1434     01E7  3A00               	xorlw	0	; case 0
  1435     01E8  1903               	skipnz
  1436     01E9  29EB               	goto	l1608
  1437     01EA  29F9               	goto	l57
  1438     01EB                     l1608:
  1439                           
  1440                           ; Switch size 1, requested type "simple"
  1441                           ; Number of cases is 4, Range of values is 0 to 3
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; direct_byte           10     6 (fixed)
  1445                           ; simple_byte           13     7 (average)
  1446                           ; jumptable            260     6 (fixed)
  1447                           ;	Chosen strategy is simple_byte
  1448     01EB  0842               	movf	??_BeepsStateMachine,w
  1449     01EC  3A00               	xorlw	0	; case 0
  1450     01ED  1903               	skipnz
  1451     01EE  2975               	goto	l1482
  1452     01EF  3A01               	xorlw	1	; case 1
  1453     01F0  1903               	skipnz
  1454     01F1  29A8               	goto	l1496
  1455     01F2  3A03               	xorlw	3	; case 2
  1456     01F3  1903               	skipnz
  1457     01F4  29B8               	goto	l1504
  1458     01F5  3A01               	xorlw	1	; case 3
  1459     01F6  1903               	skipnz
  1460     01F7  29D2               	goto	l1516
  1461     01F8  29F9               	goto	l57
  1462     01F9                     l57:
  1463     01F9  0008               	return
  1464     01FA                     __end_of_BeepsStateMachine:
  1465                           
  1466                           	psect	text6
  1467     02B0                     __ptext6:	
  1468 ;; *************** function ___bmul *****************
  1469 ;; Defined at:
  1470 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  multiplier      1    wreg     unsigned char 
  1473 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  multiplier      1    4[BANK0 ] unsigned char 
  1476 ;;  product         1    3[BANK0 ] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0, btemp+1
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMMON   BANK0
  1486 ;;      Params:         0       1
  1487 ;;      Locals:         0       2
  1488 ;;      Temps:          0       0
  1489 ;;      Totals:         0       3
  1490 ;;Total ram usage:        3 bytes
  1491 ;; Hardware stack levels used: 1
  1492 ;; Hardware stack levels required when called: 1
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_EnqueueBeeps
  1497 ;;		_BeepsStateMachine
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501     02B0                     ___bmul:	
  1502                           ;psect for function ___bmul
  1503                           
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1507                           ;___bmul@multiplier stored from wreg
  1508     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1509     02B1  00BE               	movwf	___bmul@multiplier
  1510     02B2                     l1210:
  1511     02B2  01BD               	clrf	___bmul@product
  1512     02B3                     l1212:
  1513     02B3  1C3E               	btfss	___bmul@multiplier,0
  1514     02B4  2AB6               	goto	u351
  1515     02B5  2AB7               	goto	u350
  1516     02B6                     u351:
  1517     02B6  2ABB               	goto	l1216
  1518     02B7                     u350:
  1519     02B7                     l1214:
  1520     02B7  083C               	movf	___bmul@multiplicand,w
  1521     02B8  00DF               	movwf	btemp+1
  1522     02B9  085F               	movf	btemp+1,w
  1523     02BA  07BD               	addwf	___bmul@product,f
  1524     02BB                     l1216:
  1525     02BB  1003               	clrc
  1526     02BC  0DBC               	rlf	___bmul@multiplicand,f
  1527     02BD                     l1218:
  1528     02BD  1003               	clrc
  1529     02BE  0CBE               	rrf	___bmul@multiplier,f
  1530     02BF                     l1220:
  1531     02BF  083E               	movf	___bmul@multiplier,w
  1532     02C0  1D03               	btfss	3,2
  1533     02C1  2AC3               	goto	u361
  1534     02C2  2AC4               	goto	u360
  1535     02C3                     u361:
  1536     02C3  2AB3               	goto	l1212
  1537     02C4                     u360:
  1538     02C4                     l1222:
  1539     02C4  083D               	movf	___bmul@product,w
  1540     02C5                     l322:
  1541     02C5  0008               	return
  1542     02C6                     __end_of___bmul:
  1543                           
  1544                           	psect	text7
  1545     01FA                     __ptext7:	
  1546 ;; *************** function ___awmod *****************
  1547 ;; Defined at:
  1548 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  divisor         2    2[BANK0 ] int 
  1551 ;;  dividend        2    4[BANK0 ] int 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  sign            1    7[BANK0 ] unsigned char 
  1554 ;;  counter         1    6[BANK0 ] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  2    2[BANK0 ] int 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0, btemp+1
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0
  1564 ;;      Params:         0       4
  1565 ;;      Locals:         0       2
  1566 ;;      Temps:          0       0
  1567 ;;      Totals:         0       6
  1568 ;;Total ram usage:        6 bytes
  1569 ;; Hardware stack levels used: 1
  1570 ;; Hardware stack levels required when called: 1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_EnqueueBeeps
  1575 ;;		_BeepsStateMachine
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579     01FA                     ___awmod:	
  1580                           ;psect for function ___awmod
  1581                           
  1582     01FA                     l1226:	
  1583                           ;incstack = 0
  1584                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  1585                           
  1586     01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1587     01FB  01C1               	clrf	___awmod@sign
  1588     01FC                     l1228:
  1589     01FC  1FBF               	btfss	___awmod@dividend+1,7
  1590     01FD  29FF               	goto	u371
  1591     01FE  2A00               	goto	u370
  1592     01FF                     u371:
  1593     01FF  2A07               	goto	l1234
  1594     0200                     u370:
  1595     0200                     l1230:
  1596     0200  09BE               	comf	___awmod@dividend,f
  1597     0201  09BF               	comf	___awmod@dividend+1,f
  1598     0202  0ABE               	incf	___awmod@dividend,f
  1599     0203  1903               	skipnz
  1600     0204  0ABF               	incf	___awmod@dividend+1,f
  1601     0205                     l1232:
  1602     0205  01C1               	clrf	___awmod@sign
  1603     0206  0AC1               	incf	___awmod@sign,f
  1604     0207                     l1234:
  1605     0207  1FBD               	btfss	___awmod@divisor+1,7
  1606     0208  2A0A               	goto	u381
  1607     0209  2A0B               	goto	u380
  1608     020A                     u381:
  1609     020A  2A10               	goto	l1238
  1610     020B                     u380:
  1611     020B                     l1236:
  1612     020B  09BC               	comf	___awmod@divisor,f
  1613     020C  09BD               	comf	___awmod@divisor+1,f
  1614     020D  0ABC               	incf	___awmod@divisor,f
  1615     020E  1903               	skipnz
  1616     020F  0ABD               	incf	___awmod@divisor+1,f
  1617     0210                     l1238:
  1618     0210  083C               	movf	___awmod@divisor,w
  1619     0211  043D               	iorwf	___awmod@divisor+1,w
  1620     0212  1903               	btfsc	3,2
  1621     0213  2A15               	goto	u391
  1622     0214  2A16               	goto	u390
  1623     0215                     u391:
  1624     0215  2A45               	goto	l1256
  1625     0216                     u390:
  1626     0216                     l1240:
  1627     0216  01C0               	clrf	___awmod@counter
  1628     0217  0AC0               	incf	___awmod@counter,f
  1629     0218  2A24               	goto	l1246
  1630     0219                     l1242:
  1631     0219  3001               	movlw	1
  1632     021A                     u405:
  1633     021A  1003               	clrc
  1634     021B  0DBC               	rlf	___awmod@divisor,f
  1635     021C  0DBD               	rlf	___awmod@divisor+1,f
  1636     021D  3EFF               	addlw	-1
  1637     021E  1D03               	skipz
  1638     021F  2A1A               	goto	u405
  1639     0220                     l1244:
  1640     0220  3001               	movlw	1
  1641     0221  00DF               	movwf	btemp+1
  1642     0222  085F               	movf	btemp+1,w
  1643     0223  07C0               	addwf	___awmod@counter,f
  1644     0224                     l1246:
  1645     0224  1FBD               	btfss	___awmod@divisor+1,7
  1646     0225  2A27               	goto	u411
  1647     0226  2A28               	goto	u410
  1648     0227                     u411:
  1649     0227  2A19               	goto	l1242
  1650     0228                     u410:
  1651     0228                     l1248:
  1652     0228  083D               	movf	___awmod@divisor+1,w
  1653     0229  023F               	subwf	___awmod@dividend+1,w
  1654     022A  1D03               	skipz
  1655     022B  2A2E               	goto	u425
  1656     022C  083C               	movf	___awmod@divisor,w
  1657     022D  023E               	subwf	___awmod@dividend,w
  1658     022E                     u425:
  1659     022E  1C03               	skipc
  1660     022F  2A31               	goto	u421
  1661     0230  2A32               	goto	u420
  1662     0231                     u421:
  1663     0231  2A38               	goto	l1252
  1664     0232                     u420:
  1665     0232                     l1250:
  1666     0232  083C               	movf	___awmod@divisor,w
  1667     0233  02BE               	subwf	___awmod@dividend,f
  1668     0234  083D               	movf	___awmod@divisor+1,w
  1669     0235  1C03               	skipc
  1670     0236  03BF               	decf	___awmod@dividend+1,f
  1671     0237  02BF               	subwf	___awmod@dividend+1,f
  1672     0238                     l1252:
  1673     0238  3001               	movlw	1
  1674     0239                     u435:
  1675     0239  1003               	clrc
  1676     023A  0CBD               	rrf	___awmod@divisor+1,f
  1677     023B  0CBC               	rrf	___awmod@divisor,f
  1678     023C  3EFF               	addlw	-1
  1679     023D  1D03               	skipz
  1680     023E  2A39               	goto	u435
  1681     023F                     l1254:
  1682     023F  3001               	movlw	1
  1683     0240  02C0               	subwf	___awmod@counter,f
  1684     0241  1D03               	btfss	3,2
  1685     0242  2A44               	goto	u441
  1686     0243  2A45               	goto	u440
  1687     0244                     u441:
  1688     0244  2A28               	goto	l1248
  1689     0245                     u440:
  1690     0245                     l1256:
  1691     0245  0841               	movf	___awmod@sign,w
  1692     0246  1903               	btfsc	3,2
  1693     0247  2A49               	goto	u451
  1694     0248  2A4A               	goto	u450
  1695     0249                     u451:
  1696     0249  2A4F               	goto	l1260
  1697     024A                     u450:
  1698     024A                     l1258:
  1699     024A  09BE               	comf	___awmod@dividend,f
  1700     024B  09BF               	comf	___awmod@dividend+1,f
  1701     024C  0ABE               	incf	___awmod@dividend,f
  1702     024D  1903               	skipnz
  1703     024E  0ABF               	incf	___awmod@dividend+1,f
  1704     024F                     l1260:
  1705     024F  083F               	movf	___awmod@dividend+1,w
  1706     0250  00BD               	movwf	?___awmod+1
  1707     0251  083E               	movf	___awmod@dividend,w
  1708     0252  00BC               	movwf	?___awmod
  1709     0253                     l462:
  1710     0253  0008               	return
  1711     0254                     __end_of___awmod:
  1712                           
  1713                           	psect	text8
  1714     00C5                     __ptext8:	
  1715 ;; *************** function _ADCProcessing *****************
  1716 ;; Defined at:
  1717 ;;		line 48 in file "interrupt.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  adcValue        2    5[BANK0 ] unsigned int 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0
  1731 ;;      Params:         0       0
  1732 ;;      Locals:         0       2
  1733 ;;      Temps:          0       2
  1734 ;;      Totals:         0       4
  1735 ;;Total ram usage:        4 bytes
  1736 ;; Hardware stack levels used: 1
  1737 ;; Hardware stack levels required when called: 2
  1738 ;; This function calls:
  1739 ;;		_MuxTemp
  1740 ;;		_MuxVoltage
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746     00C5                     _ADCProcessing:	
  1747                           ;psect for function _ADCProcessing
  1748                           
  1749     00C5                     l1346:	
  1750                           ;incstack = 0
  1751                           ; Regs used in _ADCProcessing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1752                           
  1753     00C5                     l1348:
  1754                           
  1755                           ;interrupt.c: 51:     static uint8_t adcState = 0;;interrupt.c: 53:     if (ADIF == 1){
  1756     00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1757     00C6  1F0C               	btfss	12,6	;volatile
  1758     00C7  28C9               	goto	u471
  1759     00C8  28CA               	goto	u470
  1760     00C9                     u471:
  1761     00C9  2973               	goto	l210
  1762     00CA                     u470:
  1763     00CA                     l1350:
  1764                           
  1765                           ;interrupt.c: 54:      adcValue = (uint16_t) ((ADRESH << 8) + ADRESL);
  1766     00CA  081E               	movf	30,w	;volatile
  1767     00CB  00C0               	movwf	ADCProcessing@adcValue+1
  1768     00CC  1683               	bsf	3,5	;RP0=1, select bank1
  1769     00CD  081E               	movf	30,w	;volatile
  1770     00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1771     00CF  00BF               	movwf	ADCProcessing@adcValue
  1772                           
  1773                           ;interrupt.c: 56:      switch (adcState){
  1774     00D0  2963               	goto	l1406
  1775     00D1                     l1352:
  1776                           
  1777                           ;interrupt.c: 59:    if ((adcValue > 96) && (adcValue < 148)){
  1778     00D1  3000               	movlw	0
  1779     00D2  0240               	subwf	ADCProcessing@adcValue+1,w
  1780     00D3  3061               	movlw	97
  1781     00D4  1903               	skipnz
  1782     00D5  023F               	subwf	ADCProcessing@adcValue,w
  1783     00D6  1C03               	skipc
  1784     00D7  28D9               	goto	u481
  1785     00D8  28DA               	goto	u480
  1786     00D9                     u481:
  1787     00D9  28ED               	goto	l1360
  1788     00DA                     u480:
  1789     00DA                     l1354:
  1790     00DA  3000               	movlw	0
  1791     00DB  0240               	subwf	ADCProcessing@adcValue+1,w
  1792     00DC  3094               	movlw	148
  1793     00DD  1903               	skipnz
  1794     00DE  023F               	subwf	ADCProcessing@adcValue,w
  1795     00DF  1803               	skipnc
  1796     00E0  28E2               	goto	u491
  1797     00E1  28E3               	goto	u490
  1798     00E2                     u491:
  1799     00E2  28ED               	goto	l1360
  1800     00E3                     u490:
  1801     00E3                     l1356:
  1802                           
  1803                           ;interrupt.c: 60:       if(prmFlags.errorHighTemperature == 0) GP5 = 0;
  1804     00E3  19B9               	btfsc	_prmFlags,3	;volatile
  1805     00E4  28E6               	goto	u501
  1806     00E5  28E7               	goto	u500
  1807     00E6                     u501:
  1808     00E6  28E9               	goto	l190
  1809     00E7                     u500:
  1810     00E7                     l1358:
  1811     00E7  1285               	bcf	5,5	;volatile
  1812     00E8  28EA               	goto	l191
  1813     00E9                     l190:	
  1814                           ;interrupt.c: 61:        else GP5 = 1;
  1815                           
  1816     00E9  1685               	bsf	5,5	;volatile
  1817     00EA                     l191:
  1818                           
  1819                           ;interrupt.c: 62:        prmFlags.errorUnderVoltage = 0;
  1820     00EA  10B9               	bcf	_prmFlags,1	;volatile
  1821                           
  1822                           ;interrupt.c: 63:           prmFlags.errorOverVoltage = 0;
  1823     00EB  1139               	bcf	_prmFlags,2	;volatile
  1824                           
  1825                           ;interrupt.c: 64:            }
  1826     00EC  2904               	goto	l1368
  1827     00ED                     l1360:
  1828     00ED  3000               	movlw	0
  1829     00EE  0240               	subwf	ADCProcessing@adcValue+1,w
  1830     00EF  3061               	movlw	97
  1831     00F0  1903               	skipnz
  1832     00F1  023F               	subwf	ADCProcessing@adcValue,w
  1833     00F2  1803               	skipnc
  1834     00F3  28F5               	goto	u511
  1835     00F4  28F6               	goto	u510
  1836     00F5                     u511:
  1837     00F5  28F9               	goto	l1364
  1838     00F6                     u510:
  1839     00F6                     l1362:
  1840                           
  1841                           ;interrupt.c: 66:           GP5 = 1;
  1842     00F6  1685               	bsf	5,5	;volatile
  1843                           
  1844                           ;interrupt.c: 67:        prmFlags.errorUnderVoltage = 1;
  1845     00F7  14B9               	bsf	_prmFlags,1	;volatile
  1846                           
  1847                           ;interrupt.c: 68:   }
  1848     00F8  2904               	goto	l1368
  1849     00F9                     l1364:
  1850     00F9  3000               	movlw	0
  1851     00FA  0240               	subwf	ADCProcessing@adcValue+1,w
  1852     00FB  3094               	movlw	148
  1853     00FC  1903               	skipnz
  1854     00FD  023F               	subwf	ADCProcessing@adcValue,w
  1855     00FE  1C03               	skipc
  1856     00FF  2901               	goto	u521
  1857     0100  2902               	goto	u520
  1858     0101                     u521:
  1859     0101  2904               	goto	l1368
  1860     0102                     u520:
  1861     0102                     l1366:
  1862                           
  1863                           ;interrupt.c: 72:        GP5 = 1;
  1864     0102  1685               	bsf	5,5	;volatile
  1865                           
  1866                           ;interrupt.c: 73:     prmFlags.errorOverVoltage = 1;
  1867     0103  1539               	bsf	_prmFlags,2	;volatile
  1868     0104                     l1368:
  1869                           
  1870                           ;interrupt.c: 76:       MuxTemp();
  1871     0104  22EA               	fcall	_MuxTemp
  1872     0105                     l1370:
  1873                           
  1874                           ;interrupt.c: 77:    adcState = 1;
  1875     0105  1283               	bcf	3,5	;RP0=0, select bank0
  1876     0106  01B3               	clrf	ADCProcessing@adcState
  1877     0107  0AB3               	incf	ADCProcessing@adcState,f
  1878                           
  1879                           ;interrupt.c: 78:       break;
  1880     0108  2973               	goto	l210
  1881     0109                     l1372:
  1882                           
  1883                           ;interrupt.c: 83:       if (adcValue < 200){
  1884     0109  3000               	movlw	0
  1885     010A  0240               	subwf	ADCProcessing@adcValue+1,w
  1886     010B  30C8               	movlw	200
  1887     010C  1903               	skipnz
  1888     010D  023F               	subwf	ADCProcessing@adcValue,w
  1889     010E  1803               	skipnc
  1890     010F  2911               	goto	u531
  1891     0110  2912               	goto	u530
  1892     0111                     u531:
  1893     0111  2915               	goto	l1376
  1894     0112                     u530:
  1895     0112                     l1374:
  1896                           
  1897                           ;interrupt.c: 84:         GP5 = 1;
  1898     0112  1685               	bsf	5,5	;volatile
  1899                           
  1900                           ;interrupt.c: 86:              prmFlags.errorHighTemperature = 0;
  1901     0113  11B9               	bcf	_prmFlags,3	;volatile
  1902                           
  1903                           ;interrupt.c: 87:     }
  1904     0114  295F               	goto	l1400
  1905     0115                     l1376:
  1906     0115  3000               	movlw	0
  1907     0116  0240               	subwf	ADCProcessing@adcValue+1,w
  1908     0117  30C9               	movlw	201
  1909     0118  1903               	skipnz
  1910     0119  023F               	subwf	ADCProcessing@adcValue,w
  1911     011A  1C03               	skipc
  1912     011B  291D               	goto	u541
  1913     011C  291E               	goto	u540
  1914     011D                     u541:
  1915     011D  2934               	goto	l1386
  1916     011E                     u540:
  1917     011E                     l1378:
  1918     011E  3003               	movlw	3
  1919     011F  0240               	subwf	ADCProcessing@adcValue+1,w
  1920     0120  30A2               	movlw	162
  1921     0121  1903               	skipnz
  1922     0122  023F               	subwf	ADCProcessing@adcValue,w
  1923     0123  1803               	skipnc
  1924     0124  2926               	goto	u551
  1925     0125  2927               	goto	u550
  1926     0126                     u551:
  1927     0126  2934               	goto	l1386
  1928     0127                     u550:
  1929     0127                     l1380:
  1930                           
  1931                           ;interrupt.c: 90:               if((prmFlags.errorUnderVoltage == 0) && (prmFlags.errorO
      +                          verVoltage == 0)) GP5 = 0;
  1932     0127  18B9               	btfsc	_prmFlags,1	;volatile
  1933     0128  292A               	goto	u561
  1934     0129  292B               	goto	u560
  1935     012A                     u561:
  1936     012A  2931               	goto	l201
  1937     012B                     u560:
  1938     012B                     l1382:
  1939     012B  1939               	btfsc	_prmFlags,2	;volatile
  1940     012C  292E               	goto	u571
  1941     012D  292F               	goto	u570
  1942     012E                     u571:
  1943     012E  2931               	goto	l201
  1944     012F                     u570:
  1945     012F                     l1384:
  1946     012F  1285               	bcf	5,5	;volatile
  1947     0130  2932               	goto	l202
  1948     0131                     l201:	
  1949                           ;interrupt.c: 91:           else GP5 = 1;
  1950                           
  1951     0131  1685               	bsf	5,5	;volatile
  1952     0132                     l202:
  1953                           
  1954                           ;interrupt.c: 93:        prmFlags.errorHighTemperature = 0;
  1955     0132  11B9               	bcf	_prmFlags,3	;volatile
  1956                           
  1957                           ;interrupt.c: 94:                        }
  1958     0133  295F               	goto	l1400
  1959     0134                     l1386:
  1960     0134  3003               	movlw	3
  1961     0135  0240               	subwf	ADCProcessing@adcValue+1,w
  1962     0136  30A3               	movlw	163
  1963     0137  1903               	skipnz
  1964     0138  023F               	subwf	ADCProcessing@adcValue,w
  1965     0139  1C03               	skipc
  1966     013A  293C               	goto	u581
  1967     013B  293D               	goto	u580
  1968     013C                     u581:
  1969     013C  2953               	goto	l1396
  1970     013D                     u580:
  1971     013D                     l1388:
  1972     013D  3003               	movlw	3
  1973     013E  0240               	subwf	ADCProcessing@adcValue+1,w
  1974     013F  30CA               	movlw	202
  1975     0140  1903               	skipnz
  1976     0141  023F               	subwf	ADCProcessing@adcValue,w
  1977     0142  1803               	skipnc
  1978     0143  2945               	goto	u591
  1979     0144  2946               	goto	u590
  1980     0145                     u591:
  1981     0145  2953               	goto	l1396
  1982     0146                     u590:
  1983     0146                     l1390:
  1984                           
  1985                           ;interrupt.c: 97:              if((prmFlags.errorUnderVoltage == 0) && (prmFlags.errorOv
      +                          erVoltage == 0)) GP5 = 0;
  1986     0146  18B9               	btfsc	_prmFlags,1	;volatile
  1987     0147  2949               	goto	u601
  1988     0148  294A               	goto	u600
  1989     0149                     u601:
  1990     0149  2950               	goto	l205
  1991     014A                     u600:
  1992     014A                     l1392:
  1993     014A  1939               	btfsc	_prmFlags,2	;volatile
  1994     014B  294D               	goto	u611
  1995     014C  294E               	goto	u610
  1996     014D                     u611:
  1997     014D  2950               	goto	l205
  1998     014E                     u610:
  1999     014E                     l1394:
  2000     014E  1285               	bcf	5,5	;volatile
  2001     014F  2951               	goto	l206
  2002     0150                     l205:	
  2003                           ;interrupt.c: 98:           else GP5 = 1;
  2004                           
  2005     0150  1685               	bsf	5,5	;volatile
  2006     0151                     l206:
  2007                           
  2008                           ;interrupt.c: 100:        prmFlags.errorHighTemperature = 0;
  2009     0151  11B9               	bcf	_prmFlags,3	;volatile
  2010                           
  2011                           ;interrupt.c: 101:                        }
  2012     0152  295F               	goto	l1400
  2013     0153                     l1396:
  2014     0153  3003               	movlw	3
  2015     0154  0240               	subwf	ADCProcessing@adcValue+1,w
  2016     0155  30CB               	movlw	203
  2017     0156  1903               	skipnz
  2018     0157  023F               	subwf	ADCProcessing@adcValue,w
  2019     0158  1C03               	skipc
  2020     0159  295B               	goto	u621
  2021     015A  295C               	goto	u620
  2022     015B                     u621:
  2023     015B  295F               	goto	l203
  2024     015C                     u620:
  2025     015C                     l1398:
  2026                           
  2027                           ;interrupt.c: 104:              GP5 = 1;
  2028     015C  1685               	bsf	5,5	;volatile
  2029                           
  2030                           ;interrupt.c: 105:                 prmFlags.errorHighTemperature = 1;
  2031     015D  15B9               	bsf	_prmFlags,3	;volatile
  2032     015E  295F               	goto	l1400
  2033     015F                     l203:
  2034     015F                     l1400:
  2035                           
  2036                           ;interrupt.c: 109:      MuxVoltage();
  2037     015F  22DB               	fcall	_MuxVoltage
  2038     0160                     l1402:
  2039                           
  2040                           ;interrupt.c: 110:      adcState = 0;
  2041     0160  1283               	bcf	3,5	;RP0=0, select bank0
  2042     0161  01B3               	clrf	ADCProcessing@adcState
  2043                           
  2044                           ;interrupt.c: 111:  break;
  2045     0162  2973               	goto	l210
  2046     0163                     l1406:
  2047     0163  0833               	movf	ADCProcessing@adcState,w
  2048     0164  00BD               	movwf	??_ADCProcessing
  2049     0165  01BE               	clrf	??_ADCProcessing+1
  2050                           
  2051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2052                           ; Switch size 1, requested type "simple"
  2053                           ; Number of cases is 1, Range of values is 0 to 0
  2054                           ; switch strategies available:
  2055                           ; Name         Instructions Cycles
  2056                           ; simple_byte            4     3 (average)
  2057                           ; direct_byte            7     6 (fixed)
  2058                           ; jumptable            260     6 (fixed)
  2059                           ;	Chosen strategy is simple_byte
  2060     0166  083E               	movf	??_ADCProcessing+1,w
  2061     0167  3A00               	xorlw	0	; case 0
  2062     0168  1903               	skipnz
  2063     0169  296B               	goto	l1610
  2064     016A  2973               	goto	l210
  2065     016B                     l1610:
  2066                           
  2067                           ; Switch size 1, requested type "simple"
  2068                           ; Number of cases is 2, Range of values is 0 to 1
  2069                           ; switch strategies available:
  2070                           ; Name         Instructions Cycles
  2071                           ; simple_byte            7     4 (average)
  2072                           ; direct_byte            8     6 (fixed)
  2073                           ; jumptable            260     6 (fixed)
  2074                           ;	Chosen strategy is simple_byte
  2075     016B  083D               	movf	??_ADCProcessing,w
  2076     016C  3A00               	xorlw	0	; case 0
  2077     016D  1903               	skipnz
  2078     016E  28D1               	goto	l1352
  2079     016F  3A01               	xorlw	1	; case 1
  2080     0170  1903               	skipnz
  2081     0171  2909               	goto	l1372
  2082     0172  2973               	goto	l210
  2083     0173                     l210:
  2084     0173  0008               	return
  2085     0174                     __end_of_ADCProcessing:
  2086                           
  2087                           	psect	text9
  2088     02DB                     __ptext9:	
  2089 ;; *************** function _MuxVoltage *****************
  2090 ;; Defined at:
  2091 ;;		line 12 in file "interrupt.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0
  2105 ;;      Params:         0       0
  2106 ;;      Locals:         0       0
  2107 ;;      Temps:          0       1
  2108 ;;      Totals:         0       1
  2109 ;;Total ram usage:        1 bytes
  2110 ;; Hardware stack levels used: 1
  2111 ;; Hardware stack levels required when called: 1
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_Init_uC
  2116 ;;		_ADCProcessing
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120     02DB                     _MuxVoltage:	
  2121                           ;psect for function _MuxVoltage
  2122                           
  2123     02DB                     l1270:	
  2124                           ;incstack = 0
  2125                           ; Regs used in _MuxVoltage: [wreg+status,2]
  2126                           
  2127                           
  2128                           ;interrupt.c: 13:        ADCON0 = 0;
  2129     02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2130     02DC  019F               	clrf	31	;volatile
  2131     02DD                     l1272:
  2132                           
  2133                           ;interrupt.c: 14:        ADON = 1;
  2134     02DD  141F               	bsf	31,0	;volatile
  2135     02DE                     l1274:
  2136                           
  2137                           ;interrupt.c: 15:        ADFM = 1;
  2138     02DE  179F               	bsf	31,7	;volatile
  2139     02DF                     l1276:
  2140                           
  2141                           ;interrupt.c: 16:        CHS1 = 0;
  2142     02DF  119F               	bcf	31,3	;volatile
  2143     02E0                     l1278:
  2144                           
  2145                           ;interrupt.c: 17:        CHS0 = 1;
  2146     02E0  151F               	bsf	31,2	;volatile
  2147     02E1                     l1280:
  2148                           
  2149                           ;interrupt.c: 18:        ADIF = 0;
  2150     02E1  130C               	bcf	12,6	;volatile
  2151     02E2                     l1282:
  2152                           
  2153                           ;interrupt.c: 19:        _delay((unsigned long)((50)*(4000000/4000000.0)));
  2154     02E2  3010               	movlw	16
  2155     02E3  00BC               	movwf	??_MuxVoltage
  2156     02E4                     u827:
  2157     02E4  0BBC               	decfsz	??_MuxVoltage,f
  2158     02E5  2AE4               	goto	u827
  2159     02E6  0000               	nop
  2160     02E7                     l1284:
  2161                           
  2162                           ;interrupt.c: 20:        GO = 1;
  2163     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  2164     02E8  149F               	bsf	31,1	;volatile
  2165     02E9                     l172:
  2166     02E9  0008               	return
  2167     02EA                     __end_of_MuxVoltage:
  2168                           
  2169                           	psect	text10
  2170     02EA                     __ptext10:	
  2171 ;; *************** function _MuxTemp *****************
  2172 ;; Defined at:
  2173 ;;		line 24 in file "interrupt.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0
  2187 ;;      Params:         0       0
  2188 ;;      Locals:         0       0
  2189 ;;      Temps:          0       1
  2190 ;;      Totals:         0       1
  2191 ;;Total ram usage:        1 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; Hardware stack levels required when called: 1
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_ADCProcessing
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201     02EA                     _MuxTemp:	
  2202                           ;psect for function _MuxTemp
  2203                           
  2204     02EA                     l1286:	
  2205                           ;incstack = 0
  2206                           ; Regs used in _MuxTemp: [wreg+status,2]
  2207                           
  2208                           
  2209                           ;interrupt.c: 25:        ADCON0 = 0;
  2210     02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2211     02EB  019F               	clrf	31	;volatile
  2212     02EC                     l1288:
  2213                           
  2214                           ;interrupt.c: 26:        ADON = 1;
  2215     02EC  141F               	bsf	31,0	;volatile
  2216     02ED                     l1290:
  2217                           
  2218                           ;interrupt.c: 27:        ADFM = 1;
  2219     02ED  179F               	bsf	31,7	;volatile
  2220     02EE                     l1292:
  2221                           
  2222                           ;interrupt.c: 28:        CHS1 = 0;
  2223     02EE  119F               	bcf	31,3	;volatile
  2224     02EF                     l1294:
  2225                           
  2226                           ;interrupt.c: 29:        CHS0 = 0;
  2227     02EF  111F               	bcf	31,2	;volatile
  2228     02F0                     l1296:
  2229                           
  2230                           ;interrupt.c: 30:        ADIF = 0;
  2231     02F0  130C               	bcf	12,6	;volatile
  2232     02F1                     l1298:
  2233                           
  2234                           ;interrupt.c: 31:        _delay((unsigned long)((50)*(4000000/4000000.0)));
  2235     02F1  3010               	movlw	16
  2236     02F2  00BC               	movwf	??_MuxTemp
  2237     02F3                     u837:
  2238     02F3  0BBC               	decfsz	??_MuxTemp,f
  2239     02F4  2AF3               	goto	u837
  2240     02F5  0000               	nop
  2241     02F6                     l1300:
  2242                           
  2243                           ;interrupt.c: 32:        GO = 1;
  2244     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2245     02F7  149F               	bsf	31,1	;volatile
  2246     02F8                     l175:
  2247     02F8  0008               	return
  2248     02F9                     __end_of_MuxTemp:
  2249                           
  2250                           	psect	text11
  2251     02C6                     __ptext11:	
  2252 ;; *************** function _ISR *****************
  2253 ;; Defined at:
  2254 ;;		line 35 in file "interrupt.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0
  2268 ;;      Params:         0       0
  2269 ;;      Locals:         0       0
  2270 ;;      Temps:          0       2
  2271 ;;      Totals:         0       2
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		Interrupt level 1
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281     02C6                     _ISR:	
  2282                           ;psect for function _ISR
  2283                           
  2284     02C6                     i1l1538:
  2285                           
  2286                           ;interrupt.c: 38:     if (TMR0IF == 1){
  2287     02C6  1D0B               	btfss	11,2	;volatile
  2288     02C7  2AC9               	goto	u81_21
  2289     02C8  2ACA               	goto	u81_20
  2290     02C9                     u81_21:
  2291     02C9  2AD4               	goto	i1l181
  2292     02CA                     u81_20:
  2293     02CA                     i1l1540:
  2294                           
  2295                           ;interrupt.c: 39:             TMR0 = 5;
  2296     02CA  3005               	movlw	5
  2297     02CB  0081               	movwf	1	;volatile
  2298                           
  2299                           ;interrupt.c: 40:          ++cnt0;
  2300     02CC  3001               	movlw	1
  2301     02CD  07B1               	addwf	_cnt0,f	;volatile
  2302     02CE  1803               	skipnc
  2303     02CF  0AB2               	incf	_cnt0+1,f	;volatile
  2304     02D0  3000               	movlw	0
  2305     02D1  07B2               	addwf	_cnt0+1,f	;volatile
  2306     02D2                     i1l1542:
  2307                           
  2308                           ;interrupt.c: 41:          TMR0IF = 0;
  2309     02D2  110B               	bcf	11,2	;volatile
  2310     02D3                     i1l1544:
  2311                           
  2312                           ;interrupt.c: 42:             TMR0IE = 1;
  2313     02D3  168B               	bsf	11,5	;volatile
  2314     02D4                     i1l181:
  2315     02D4  083B               	movf	??_ISR+1,w
  2316     02D5  008A               	movwf	10
  2317     02D6  0E3A               	swapf	??_ISR,w
  2318     02D7  0083               	movwf	3
  2319     02D8  0EDE               	swapf	btemp,f
  2320     02D9  0E5E               	swapf	btemp,w
  2321     02DA  0009               	retfie
  2322     02DB                     __end_of_ISR:
  2323     005E                     btemp	set	94	;btemp
  2324     005E                     wtemp0	set	94
  2325                           
  2326                           	psect	intentry
  2327     0004                     __pintentry:	
  2328                           ;incstack = 0
  2329                           ; Regs used in _ISR: [wreg]
  2330                           
  2331     0004                     interrupt_function:
  2332     005E                     saved_w	set	btemp
  2333     0004  00DE               	movwf	btemp
  2334     0005  0E03               	swapf	3,w
  2335     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2336     0007  00BA               	movwf	??_ISR
  2337     0008  080A               	movf	10,w
  2338     0009  00BB               	movwf	??_ISR+1
  2339     000A  2AC6               	ljmp	_ISR
  2340                           
  2341                           	psect	idloc
  2342                           
  2343                           ;Config register IDLOC0 @ 0x2000
  2344                           ;	unspecified, using default values
  2345     2000                     	org	8192
  2346     2000  3FFF               	dw	16383
  2347                           
  2348                           ;Config register IDLOC1 @ 0x2001
  2349                           ;	unspecified, using default values
  2350     2001                     	org	8193
  2351     2001  3FFF               	dw	16383
  2352                           
  2353                           ;Config register IDLOC2 @ 0x2002
  2354                           ;	unspecified, using default values
  2355     2002                     	org	8194
  2356     2002  3FFF               	dw	16383
  2357                           
  2358                           ;Config register IDLOC3 @ 0x2003
  2359                           ;	unspecified, using default values
  2360     2003                     	org	8195
  2361     2003  3FFF               	dw	16383
  2362                           
  2363                           	psect	config
  2364                           
  2365                           ;Config register CONFIG @ 0x2007
  2366                           ;	Oscillator Selection bits
  2367                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  2368                           ;	Watchdog Timer Enable bit
  2369                           ;	WDTE = OFF, WDT disabled
  2370                           ;	Power-Up Timer Enable bit
  2371                           ;	PWRTE = OFF, PWRT disabled
  2372                           ;	GP3/MCLR pin function select
  2373                           ;	MCLRE = ON, GP3/MCLR pin function is MCLR
  2374                           ;	Brown-out Detect Enable bit
  2375                           ;	BOREN = ON, BOD enabled
  2376                           ;	Code Protection bit
  2377                           ;	CP = OFF, Program Memory code protection is disabled
  2378                           ;	Data Code Protection bit
  2379                           ;	CPD = OFF, Data memory code protection is disabled
  2380     2007                     	org	8199
  2381     2007  31F4               	dw	12788

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     20      46

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_playAlert
    _playAlert->_EnqueueBeeps
    _EnqueueBeeps->___awmod
    _Init_uC->_MuxVoltage
    _BeepsStateMachine->___awmod
    _ADCProcessing->_MuxTemp
    _ADCProcessing->_MuxVoltage

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3028
                      _ADCProcessing
                  _BeepsStateMachine
                         _InitTimer0
                            _Init_uC
                          _playAlert
 ---------------------------------------------------------------------------------
 (1) _playAlert                                            9     9      0    1858
                                             11 BANK0      9     9      0
                       _EnqueueBeeps
 ---------------------------------------------------------------------------------
 (2) _EnqueueBeeps                                         3     0      3    1600
                                              8 BANK0      3     0      3
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _Init_uC                                              0     0      0       0
                         _MuxVoltage
 ---------------------------------------------------------------------------------
 (1) _InitTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BeepsStateMachine                                    2     2      0     948
                                              8 BANK0      2     2      0
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     196
                                              2 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     752
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _ADCProcessing                                        4     4      0     222
                                              3 BANK0      4     4      0
                            _MuxTemp
                         _MuxVoltage
 ---------------------------------------------------------------------------------
 (2) _MuxVoltage                                           1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MuxTemp                                              1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCProcessing
     _MuxTemp
     _MuxVoltage
   _BeepsStateMachine
     ___awmod
     ___bmul
   _InitTimer0
   _Init_uC
     _MuxVoltage
   _playAlert
     _EnqueueBeeps
       ___awmod
       ___bmul

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     14      2E       4       74.2%
ABS                  0      0      2E       5        0.0%
DATA                 0      0      2E       6        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Sep 12 15:18:35 2025

                           ___bmul@product 003D                                         l34 028F  
                                       l70 0035                                         l63 0017  
                                       l57 01F9                                         l73 0043  
                                       l67 0026                                         l87 00C4  
                                       _GO 00F9                                         fsr 0004  
                                      l201 0131                                        l202 0132  
                                      l210 0173                                        l203 015F  
                                      l205 0150                                        l206 0151  
                                      l134 0308                                        l137 02AF  
                                      l322 02C5                                        l172 02E9  
                                      l190 00E9                                        l175 02F8  
                                      l191 00EA                                        l462 0253  
                                      _GP2 002A                                        _GP4 002C  
                                      _GP5 002D                                        _GIE 005F  
                                      u410 0228                                        u411 0227  
                                      u500 00E7                                        u420 0232  
                                      u501 00E6                                        u421 0231  
                                      u405 021A                                        u510 00F6  
                                      u350 02B7                                        u511 00F5  
                                      u351 02B6                                        u600 014A  
                                      u520 0102                                        u440 0245  
                                      u360 02C4                                        u601 0149  
                                      u521 0101                                        u441 0244  
                                      u425 022E                                        u361 02C3  
                                      u610 014E                                        u530 0112  
                                      u450 024A                                        u370 0200  
                                      u611 014D                                        u531 0111  
                                      u451 0249                                        u435 0239  
                                      u371 01FF                                        u620 015C  
                                      u540 011E                                        u380 020B  
                                      u460 0269                                        u700 004E  
                                      _ISR 02C6                                        u621 015B  
                                      u541 011D                                        u381 020A  
                                      u461 0268                                        u701 004D  
                                      u550 0127                                        u470 00CA  
                                      u390 0216                                        u710 007A  
                                      u630 001B                                        u551 0126  
                                      u471 00C9                                        u391 0215  
                                      u711 0079                                        u631 001A  
                                      u560 012B                                        u480 00DA  
                                      u800 01DB                                        u720 0093  
                                      u640 0023                                        u561 012A  
                                      u481 00D9                                        u801 01DA  
                                      u721 0092                                        u641 0022  
                                      u570 012F                                        u490 00E3  
                                      u730 00AB                                        u650 002A  
                                      u571 012E                                        u491 00E2  
                                      u731 00AA                                        u651 0029  
                                      u580 013D                                        u740 00C4  
                                      u660 0032                                        u581 013C  
                                      u741 00C3                                        u661 0031  
                                      u590 0146                                        u750 017B  
                                      u670 0039                                        u591 0145  
                                      u751 017A                                        u735 00A7  
                                      u671 0038                                        u760 01B2  
                                      u680 0040                                        u761 01B1  
                                      u681 003F                                        u770 01C1  
                                      u690 0047                                        u827 02E4  
                                      u771 01C0                                        u691 0046  
                                      u780 01C8                                        u837 02F3  
                                      u781 01C7                                        u765 01AE  
                                      u790 01CF                                        u791 01CE  
                                      fsr0 0004                                        indf 0000  
                             ___awmod@sign 0041                      ADCProcessing@adcValue 003F  
                    ADCProcessing@adcState 0033                                       ?_ISR 003A  
                                     l1210 02B2                                       l1300 02F6  
                                     l1220 02BF                                       l1212 02B3  
                                     l1230 0200                                       l1222 02C4  
                                     l1214 02B7                                       l1302 0301  
                                     l1310 0290                                       l1400 015F  
                                     l1240 0216                                       l1232 0205  
                                     l1216 02BB                                       l1304 0304  
                                     l1320 029A                                       l1312 0293  
                                     l1402 0160                                       l1250 0232  
                                     l1242 0219                                       l1234 0207  
                                     l1226 01FA                                       l1218 02BD  
                                     l1306 0306                                       l1330 02A4  
                                     l1322 029C                                       l1314 0295  
                                     l1260 024F                                       l1252 0238  
                                     l1244 0220                                       l1236 020B  
                                     l1228 01FC                                       l1500 01B4  
                                     l1308 0307                                       l1340 02AB  
                                     l1332 02A5                                       l1324 029E  
                                     l1316 0296                                       l1420 0023  
                                     l1412 0013                                       l1270 02DB  
                                     l1406 0163                                       l1350 00CA  
                                     l1254 023F                                       l1246 0224  
                                     l1238 0210                                       l1510 01C8  
                                     l1502 01B6                                       l1342 02AC  
                                     l1334 02A7                                       l1326 02A0  
                                     l1318 0298                                       l1430 003B  
                                     l1422 002A                                       l1414 001B  
                                     l1280 02E1                                       l1272 02DD  
                                     l1360 00ED                                       l1352 00D1  
                                     l1248 0228                                       l1256 0245  
                                     l1520 01E0                                       l1512 01CA  
                                     l1504 01B8                                       l1344 02AE  
                                     l1336 02A8                                       l1328 02A2  
                                     l1264 0254                                       l1440 004A  
                                     l1432 003C                                       l1424 002E  
                                     l1416 001D                                       l1290 02ED  
                                     l1282 02E2                                       l1274 02DE  
                                     l1610 016B                                       l1370 0105  
                                     l1362 00F6                                       l1354 00DA  
                                     l1346 00C5                                       l1258 024A  
                                     l1514 01CF                                       l1506 01C1  
                                     l1338 02AA                                       l1266 0269  
                                     l1442 004E                                       l1434 0040  
                                     l1426 0032                                       l1450 0067  
                                     l1418 001F                                       l1530 0309  
                                     l1292 02EE                                       l1284 02E7  
                                     l1276 02DF                                       l1380 0127  
                                     l1372 0109                                       l1364 00F9  
                                     l1356 00E3                                       l1348 00C5  
                                     l1516 01D2                                       l1508 01C3  
                                     l1524 01E2                                       l1268 0280  
                                     l1460 0088                                       l1452 006A  
                                     l1444 004F                                       l1436 0047  
                                     l1428 0039                                       l1532 030B  
                                     l1294 02EF                                       l1286 02EA  
                                     l1278 02E0                                       l1390 0146  
                                     l1382 012B                                       l1374 0112  
                                     l1366 0102                                       l1358 00E7  
                                     l1518 01DB                                       l1470 00B3  
                                     l1454 006C                                       l1462 008D  
                                     l1606 0059                                       l1438 0048  
                                     l1534 030C                                       l1296 02F0  
                                     l1288 02EC                                       l1392 014A  
                                     l1384 012F                                       l1376 0115  
                                     l1368 0104                                       l1608 01EB  
                                     l1480 0174                                       l1472 00B9  
                                     l1464 0093                                       l1456 007A  
                                     l1448 0051                                       l1536 030D  
                                     l1298 02F1                                       l1394 014E  
                                     l1378 011E                                       l1386 0134  
                                     l1490 01A2                                       l1482 0175  
                                     l1466 0095                                       l1474 00BE  
                                     l1458 0082                                       l1388 013D  
                                     l1396 0153                                       l1492 01A4  
                                     l1484 017B                                       l1468 00AB  
                                     l1398 015C                                       l1494 01A6  
                                     l1486 0192                                       l1496 01A8  
                                     l1488 01A1                                       l1498 01B2  
                                     _ADIF 0066                                       _ADFM 00FF  
                                     _ADON 00F8                                       _CHS0 00FA  
                                     _CHS1 00FB                                       _GPIO 0005  
                                     _PEIE 005E                                       _VCFG 00FE  
                                     _TMR0 0001                              ?_EnqueueBeeps 0042  
                                     _cnt0 0031                                       _main 0309  
                                     btemp 005E                                       start 000B  
                        ___bmul@multiplier 003E                            __end_of_Init_uC 02B0  
                                    ??_ISR 003A                            __end_of_MuxTemp 02F9  
                                    ?_main 003A                            __end_of___awmod 0254  
                                    _CMCON 0019                                      _ANSEL 009F  
                                    i1l181 02D4                                      u81_20 02CA  
                                    u81_21 02C9                                      _VRCON 0099  
                 EnqueueBeeps@allowTimeout 0044                             ??_EnqueueBeeps 0000  
                                    pclath 000A                                      status 0003  
                                    wtemp0 005E      BeepsStateMachine@stateMachineDuration 002F  
                          __initialization 000C                                 _InitTimer0 0301  
                             __end_of_main 0310                                     ??_main 0000  
                                   _ADCON0 001F                                     _ADRESH 001E  
                                   _ADRESL 009E                                     i1l1540 02CA  
                                   i1l1542 02D2                                     i1l1544 02D3  
                                   i1l1538 02C6                                     _TMR0IE 005D  
                                   _TMR0IF 005A                                     _TRISIO 0085  
                                ??_Init_uC 0000                                  ??_MuxTemp 003C  
                                   ___bmul 02B0                                  ??___awmod 0000  
                               _MuxVoltage 02DB                            ___awmod@divisor 003C  
                          ___awmod@counter 0040                                     saved_w 005E  
                  __end_of__initialization 0011                              playAlert@i_85 004B  
                      ___bmul@multiplicand 003C                                ?_InitTimer0 003A  
                           __pcstackCOMMON 0000                       __end_of_EnqueueBeeps 0290  
                               _beepsQueue 0020                                 __pbssBANK0 0020  
                            _ADCProcessing 00C5                                 __pmaintext 0309  
                                  ?___bmul 003C                                 __pintentry 0004  
                              ?_MuxVoltage 003A                                    _TRISIO0 0428  
                                  _TRISIO1 0429                                    _TRISIO2 042A  
                                  _TRISIO4 042C                                    _TRISIO5 042D  
                           ?_ADCProcessing 003A             playAlert@howMuchTimesPlayShort 004D  
                                  _Init_uC 0290                                    _MuxTemp 02EA  
                                  ___awmod 01FA                     BeepsStateMachine@state 0036  
                                  __ptext1 0013                                    __ptext2 0254  
                                  __ptext3 0290                                    __ptext4 0301  
                                  __ptext5 0174                                    __ptext6 02B0  
                                  __ptext7 01FA                                    __ptext8 00C5  
                                  __ptext9 02DB                           ___awmod@dividend 003E  
                        __end_of_playAlert 00C5                                    clrloop0 02FA  
                     end_of_initialization 0011                            ??_ADCProcessing 003D  
                             _EnqueueBeeps 0254                       EnqueueBeeps@duration 0042  
                             ??_InitTimer0 0000                             __end_of___bmul 02C6  
                      start_initialization 000C                                __end_of_ISR 02DB  
                       __end_of_InitTimer0 0309                                   ??___bmul 0000  
                             ??_MuxVoltage 003C                                  ___latbits 0000  
                            __pcstackBANK0 003A                         __end_of_MuxVoltage 02EA  
                               playAlert@i 004A                                   ?_Init_uC 003A  
                                 ?_MuxTemp 003A                                   ?___awmod 003C  
            playAlert@howMuchTimesPlayLong 004C                          interrupt_function 0004  
                                _playAlert 0013                                  clear_ram0 02F9  
                      playAlert@totalBeeps 0049                        playAlert@soundState 0034  
                                _queueHead 0038                                  _queueTail 0037  
                               ?_playAlert 003A                                   __ptext10 02EA  
                                 __ptext11 02C6                      __end_of_ADCProcessing 0174  
                        _BeepsStateMachine 0174                         ?_BeepsStateMachine 003A  
                                 _prmFlags 0039                        ??_BeepsStateMachine 0042  
                __end_of_BeepsStateMachine 01FA                                   intlevel1 0000  
                              ??_playAlert 0045                                 _OPTION_REG 0081  
BeepsStateMachine@stateMachineAllowTimeout 0035  
